{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":34377,"databundleVersionId":3220602,"sourceType":"competition"}],"dockerImageVersionId":31153,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\n\nfrom xgboost import XGBClassifier # https://xgboost.readthedocs.io/en/stable/python/python_api.html#xgboost.XGBClassifier\nfrom catboost import CatBoostClassifier # https://catboost.ai/docs/en/concepts/python-reference_catboostclassifier\nfrom lightgbm import LGBMClassifier # https://lightgbm.readthedocs.io/en/stable/pythonapi/lightgbm.LGBMClassifier.html#lightgbm.LGBMClassifier\nfrom sklearn.linear_model import RidgeClassifier\n\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import StratifiedKFold, cross_val_score, cross_val_predict\n\n\n# Disable warnings\nwarnings.filterwarnings(\"ignore\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-26T21:25:43.866194Z","iopub.execute_input":"2025-10-26T21:25:43.867183Z","iopub.status.idle":"2025-10-26T21:25:43.898384Z","shell.execute_reply.started":"2025-10-26T21:25:43.867126Z","shell.execute_reply":"2025-10-26T21:25:43.894256Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_37/1926305251.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbase\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mBaseEstimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTransformerMixin\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpipeline\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mPipeline\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodel_selection\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mStratifiedKFold\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcross_val_score\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcross_val_pred\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mImportError\u001b[0m: cannot import name 'cross_val_pred' from 'sklearn.model_selection' (/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/__init__.py)"],"ename":"ImportError","evalue":"cannot import name 'cross_val_pred' from 'sklearn.model_selection' (/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/__init__.py)","output_type":"error"}],"execution_count":139},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/spaceship-titanic/train.csv\")\ndf_pred = pd.read_csv(\"/kaggle/input/spaceship-titanic/test.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-26T21:25:43.899372Z","iopub.status.idle":"2025-10-26T21:25:43.899767Z","shell.execute_reply.started":"2025-10-26T21:25:43.899612Z","shell.execute_reply":"2025-10-26T21:25:43.899628Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-26T21:25:43.902261Z","iopub.status.idle":"2025-10-26T21:25:43.902602Z","shell.execute_reply.started":"2025-10-26T21:25:43.902450Z","shell.execute_reply":"2025-10-26T21:25:43.902465Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def DataFrameSplit(df, feature=None):\n    df = df.copy()\n    df = df.set_index(\"PassengerId\")\n\n    if feature:\n        X = df.drop(feature, axis=1)\n        y = df[feature]\n        return X, y\n        \n    X = df\n    return X\n    ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-26T21:25:43.904214Z","iopub.status.idle":"2025-10-26T21:25:43.904682Z","shell.execute_reply.started":"2025-10-26T21:25:43.904430Z","shell.execute_reply":"2025-10-26T21:25:43.904449Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X, y = DataFrameSplit(df, \"Transported\")\nX_pred = DataFrameSplit(df_pred)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-26T21:25:43.906607Z","iopub.status.idle":"2025-10-26T21:25:43.906972Z","shell.execute_reply.started":"2025-10-26T21:25:43.906834Z","shell.execute_reply":"2025-10-26T21:25:43.906848Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(\"y: \", y.shape)\nprint(\"X: \", X.shape)\nX.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-26T21:25:43.908980Z","iopub.status.idle":"2025-10-26T21:25:43.909670Z","shell.execute_reply.started":"2025-10-26T21:25:43.909413Z","shell.execute_reply":"2025-10-26T21:25:43.909444Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.barplot(data=df, y=df.index, x=\"Transported\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-26T21:25:43.911686Z","iopub.status.idle":"2025-10-26T21:25:43.912076Z","shell.execute_reply.started":"2025-10-26T21:25:43.911914Z","shell.execute_reply":"2025-10-26T21:25:43.911935Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(\"X: \", X_pred.shape)\nX_pred.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-26T21:25:43.914208Z","iopub.status.idle":"2025-10-26T21:25:43.914703Z","shell.execute_reply.started":"2025-10-26T21:25:43.914495Z","shell.execute_reply":"2025-10-26T21:25:43.914515Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"class SpaceTitanicFeatures(BaseEstimator, TransformerMixin):\n\n    def __init__(self):\n        self.ageMedian = None\n\n    def fit(self, df, y=None):\n        df = df.copy()\n        # Split PassengerId into GroupId and PassengerNumber\n        df[[\"GroupId\", \"PassengerNumber\"]] = df.index.to_series().str.split(\"_\", expand=True).astype(int)\n        \n        # Store known cabins per group for later use\n        self.group_cabin_map = (\n            df.dropna(subset=[\"Cabin\"])\n              .groupby(\"GroupId\")[\"Cabin\"]\n              .first()\n              .to_dict()\n        )\n        \n        self.ageMedian = df[\"Age\"].median()\n        self.homePlanet_mode = df[\"HomePlanet\"].mode()[0]\n        self.destination_mode = df[\"Destination\"].mode()[0]\n        self.cryoSleep_mode = df[\"CryoSleep\"].mode()[0]\n        self.vip_mode = df[\"VIP\"].mode()[0]\n        return self\n\n    def transform(self, df):\n        df = df.copy()\n\n        df[[\"GroupId\", \"PassengerNumber\"]] = df.index.to_series().str.split(\"_\", expand=True).astype(int)\n\n        # Use learned cabin mapping safely\n        df[\"Cabin\"] = df.apply(\n            lambda row: self.group_cabin_map.get(row[\"GroupId\"], row[\"Cabin\"]),\n            axis=1\n        )\n        df[\"Cabin\"] = df[\"Cabin\"].fillna(\"z/z/z\")\n\n        # Split Cabin\n        df[[\"Deck\", \"RoomNumber\", \"Side\"]] = df[\"Cabin\"].str.split(\"/\", expand=True)\n        \n        # Group members\n        df[\"GroupMembers\"] = df.groupby(\"GroupId\")[\"PassengerNumber\"].transform(\"count\")\n\n        # Fill spending-related columns\n        spend_cols = [\"RoomService\", \"FoodCourt\", \"ShoppingMall\", \"Spa\", \"VRDeck\"]\n        df[spend_cols] = df[spend_cols].fillna(0)\n        df[\"TotalSpend\"] = df[spend_cols].sum(axis=1)\n        df[\"MedianSpend\"] = df[spend_cols].median(axis=1)\n\n        # Fill categorical and numerical\n        df[\"HomePlanet\"] = df[\"HomePlanet\"].fillna(self.homePlanet_mode)\n        df[\"Destination\"] = df[\"Destination\"].fillna(self.destination_mode)\n        df[\"CryoSleep\"] = df[\"CryoSleep\"].fillna(self.cryoSleep_mode)\n        df[\"VIP\"] = df[\"VIP\"].fillna(self.vip_mode)\n        df[\"Age\"] = df[\"Age\"].fillna(self.ageMedian)\n\n        # drop unneeded columns\n        df.drop(\"Name\", axis=1, inplace=True)\n\n        for col in list(df.select_dtypes(include=\"object\").columns):\n            df[col] = df[col].astype(\"category\")\n            \n        for col in list(df.select_dtypes(include=\"bool\").columns):\n            df[col] = df[col].astype(\"int\")\n    \n        return df\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-26T21:25:44.001881Z","iopub.execute_input":"2025-10-26T21:25:44.002239Z","iopub.status.idle":"2025-10-26T21:25:44.018619Z","shell.execute_reply.started":"2025-10-26T21:25:44.002217Z","shell.execute_reply":"2025-10-26T21:25:44.016912Z"}},"outputs":[],"execution_count":140},{"cell_type":"code","source":"features = SpaceTitanicFeatures().fit_transform(X)\nfeatures.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-26T21:25:44.020297Z","iopub.execute_input":"2025-10-26T21:25:44.020833Z","iopub.status.idle":"2025-10-26T21:25:44.262050Z","shell.execute_reply.started":"2025-10-26T21:25:44.020799Z","shell.execute_reply":"2025-10-26T21:25:44.260387Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 8693 entries, 0001_01 to 9280_02\nData columns (total 19 columns):\n #   Column           Non-Null Count  Dtype   \n---  ------           --------------  -----   \n 0   HomePlanet       8693 non-null   category\n 1   CryoSleep        8693 non-null   int64   \n 2   Cabin            8693 non-null   category\n 3   Destination      8693 non-null   category\n 4   Age              8693 non-null   float64 \n 5   VIP              8693 non-null   int64   \n 6   RoomService      8693 non-null   float64 \n 7   FoodCourt        8693 non-null   float64 \n 8   ShoppingMall     8693 non-null   float64 \n 9   Spa              8693 non-null   float64 \n 10  VRDeck           8693 non-null   float64 \n 11  GroupId          8693 non-null   int64   \n 12  PassengerNumber  8693 non-null   int64   \n 13  Deck             8693 non-null   category\n 14  RoomNumber       8693 non-null   category\n 15  Side             8693 non-null   category\n 16  GroupMembers     8693 non-null   int64   \n 17  TotalSpend       8693 non-null   float64 \n 18  MedianSpend      8693 non-null   float64 \ndtypes: category(6), float64(8), int64(5)\nmemory usage: 1.5+ MB\n","output_type":"stream"}],"execution_count":141},{"cell_type":"code","source":"cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n\nxgb = Pipeline([\n    (\"STF\", SpaceTitanicFeatures()),\n    (\"xgb\", XGBClassifier(\n        random_state=42,\n        n_estimators=1000,\n        enable_categorical=True,\n        verbose=False\n    ))\n])\n\ncat = Pipeline([\n    (\"STF\", SpaceTitanicFeatures()),\n    (\"cat\", CatBoostClassifier(\n        random_state=42,\n        n_estimators=1000,\n        cat_features=list(features.select_dtypes(include=\"category\").columns),\n        verbose=False\n    ))\n])\n\nlgbm = Pipeline([\n    (\"STF\", SpaceTitanicFeatures()),\n    (\"lgbm\", LGBMClassifier(\n        random_state=42,\n        n_estimators=1000,\n        verbose=-1\n    ))\n])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-26T21:25:44.262922Z","iopub.execute_input":"2025-10-26T21:25:44.263284Z","iopub.status.idle":"2025-10-26T21:25:44.282203Z","shell.execute_reply.started":"2025-10-26T21:25:44.263253Z","shell.execute_reply":"2025-10-26T21:25:44.280623Z"}},"outputs":[],"execution_count":142},{"cell_type":"code","source":"xgb_score = cross_val_score(xgb, X, y, cv=cv, scoring=\"accuracy\")\ncat_score = cross_val_score(cat, X, y, cv=cv, scoring=\"accuracy\")\nlgbm_score = cross_val_score(lgbm, X, y, cv=cv, scoring=\"accuracy\")\n\nprint(\"XGB:\", xgb_score, \"- Average score: \", xgb_score.mean())\nprint(\"CAT:\", cat_score, \"- Average score: \", cat_score.mean())\nprint(\"LGB:\", lgbm_score, \"- Average score: \", lgbm_score.mean())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-26T21:25:44.283986Z","iopub.execute_input":"2025-10-26T21:25:44.284502Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"predictions = pd.DataFrame(data=cat.fit(X, y).predict(X_pred), index=X_pred.index, columns=[\"Transported\"])\npredictions.to_csv(\"/kaggle/working/\" + \"submission.csv\")","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}