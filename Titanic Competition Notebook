{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"isSourceIdPinned":false,"sourceType":"competition"}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Import modules","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\n\nfrom itertools import product\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.model_selection import StratifiedKFold, cross_val_score, cross_val_predict\nfrom sklearn.preprocessing import OrdinalEncoder, StandardScaler\nfrom sklearn.impute import KNNImputer, SimpleImputer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer, make_column_selector\nfrom sklearn.model_selection import RandomizedSearchCV\n\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.linear_model import RidgeClassifier, LogisticRegression\n\n# warnings\nwarnings.filterwarnings(\"ignore\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-25T15:15:51.149911Z","iopub.execute_input":"2025-10-25T15:15:51.150263Z","iopub.status.idle":"2025-10-25T15:15:51.156904Z","shell.execute_reply.started":"2025-10-25T15:15:51.150234Z","shell.execute_reply":"2025-10-25T15:15:51.155852Z"}},"outputs":[],"execution_count":8},{"cell_type":"markdown","source":"# Import Data","metadata":{}},{"cell_type":"code","source":"trainDF = pd.read_csv(\"/kaggle/input/titanic/train.csv\", index_col=0)\ntestDF = pd.read_csv(\"/kaggle/input/titanic/test.csv\", index_col=0)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-25T15:15:51.158351Z","iopub.execute_input":"2025-10-25T15:15:51.158608Z","iopub.status.idle":"2025-10-25T15:15:51.194426Z","shell.execute_reply.started":"2025-10-25T15:15:51.158588Z","shell.execute_reply":"2025-10-25T15:15:51.193417Z"}},"outputs":[],"execution_count":9},{"cell_type":"markdown","source":"# Visuals of the categorical data","metadata":{}},{"cell_type":"code","source":"sns.barplot(data=trainDF, x=\"Pclass\", y=trainDF.index, hue=\"Survived\", palette=\"Spectral\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-25T15:15:51.195577Z","iopub.execute_input":"2025-10-25T15:15:51.195920Z","iopub.status.idle":"2025-10-25T15:15:51.497576Z","shell.execute_reply.started":"2025-10-25T15:15:51.195898Z","shell.execute_reply":"2025-10-25T15:15:51.496634Z"}},"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"<Axes: xlabel='Pclass', ylabel='PassengerId'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":10},{"cell_type":"code","source":"sns.barplot(data=trainDF, x=\"Sex\", y=trainDF.index, hue=\"Survived\", palette=\"Spectral\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-25T15:15:51.498766Z","iopub.execute_input":"2025-10-25T15:15:51.499091Z","iopub.status.idle":"2025-10-25T15:15:51.761505Z","shell.execute_reply.started":"2025-10-25T15:15:51.499061Z","shell.execute_reply":"2025-10-25T15:15:51.760721Z"}},"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"<Axes: xlabel='Sex', ylabel='PassengerId'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":11},{"cell_type":"code","source":"sns.barplot(data=trainDF, x=\"Embarked\", y=trainDF.index, hue=\"Survived\", palette=\"Spectral\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-25T15:15:51.763498Z","iopub.execute_input":"2025-10-25T15:15:51.763774Z","iopub.status.idle":"2025-10-25T15:15:52.058900Z","shell.execute_reply.started":"2025-10-25T15:15:51.763753Z","shell.execute_reply":"2025-10-25T15:15:52.058015Z"}},"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"<Axes: xlabel='Embarked', ylabel='PassengerId'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":12},{"cell_type":"markdown","source":"# Feature Creation","metadata":{}},{"cell_type":"code","source":"def featureCreation(dataframe, label=None):\n    df = dataframe.copy() \n    category = [\"Pclass\", \"Embarked\", \"Deck\", \"Title\", \"FamilyCategory\", \"AgeCategory\", \"Sex_Pclass\"]\n    boolean = [\"Sex\", \"Alone\", \"CabinMissing\", \"AgeMissing\"]\n\n    df[\"Sex\"] = df[\"Sex\"].map({\"female\": 0, \"male\": 1}).astype(\"bool\")\n    df[\"AgeMissing\"] = np.where(df[\"Age\"].isna(), 1, 0)\n    df[\"CabinMissing\"] = np.where(df[\"Cabin\"].isna(), 1, 0)\n    df[\"Deck\"] = df[\"Cabin\"].str[0]\n    df.loc[(df.Pclass == 1) & (df.Deck.isna()), [\"Deck\"]] = \"B\"\n    df.loc[(df.Pclass == 2) & (df.Deck.isna()), [\"Deck\"]] = \"D\"\n    df.loc[(df.Pclass == 3) & (df.Deck.isna()), [\"Deck\"]] = \"E\"\n    df[[\"LastName\", \"Temp\"]] = df[\"Name\"].str.split(\",\", expand=True)\n    df[[\"Title\", \"FirstName\"]] = df[\"Temp\"].str.split(\".\", n=1, expand=True)\n    df[\"Title\"] = np.select(\n            [\n                df[\"Title\"].str.strip().isin([\"Mr\",\"Dr\",\"Rev\",\"Major\",\"Capt\",\"Don\",\"Col\"]),\n                df[\"Title\"].str.strip().isin([\"Miss\", \"Jonkheer\"]),\n                df[\"Title\"].str.strip().isin([\"Master\", \"Sir\"]),\n                df[\"Title\"].str.strip().isin([\"Mrs\",\"Mlle\",\"the Countess\",\"Ms\" ,\"Lady\", \"Mme\"])\n            ],\n            [\n                \"Mr\", \"Girl\", \"Boy\", \"Mrs\"\n            ],\n            \"Mr\"\n        )\n    df[\"Family\"] = df[\"Parch\"] + df[\"SibSp\"] + 1\n    df[\"Alone\"] = np.where(df[\"Family\"] == 1, 1, 0)\n    df[\"FamilyCategory\"] = np.select(\n        [(df[\"Family\"] < 3), (df[\"Family\"] < 6)],\n        [\"Small\", \"Medium\"],\n        \"Big\"\n    )\n    df[\"AgeCategory\"] = np.select(\n        [df[\"Age\"].between(0,9),df[\"Age\"].between(10,19),df[\"Age\"].between(20,59),df[\"Age\"].between(60,100),],\n        [\"Child\", \"Teen\", \"Adult\", \"Senior\"],\n        \"unknown\"\n    )\n    df[\"FarePerPerson\"] = df[\"Fare\"] / df[\"Family\"]\n    df[\"Sex_Pclass\"] = df[\"Sex\"].astype(str) + \"_\" + df[\"Pclass\"].astype(str)\n    \n    drop_col = [\"Temp\", \"Name\", \"Cabin\", \"SibSp\", \"Parch\", \"Ticket\", \"FirstName\", \"LastName\"]\n    \n    \n    for col in category:\n        df[col] = df[col].astype(\"category\")\n    \n    for col in boolean:\n        df[col] = df[col].astype(\"int\")\n\n    X = df.drop(drop_col, axis=1)\n    \n    if label:\n        X = df.drop([label] + drop_col, axis=1)\n        y = df[label]\n        return X, y\n    return X","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-25T15:15:52.059895Z","iopub.execute_input":"2025-10-25T15:15:52.060346Z","iopub.status.idle":"2025-10-25T15:15:52.074762Z","shell.execute_reply.started":"2025-10-25T15:15:52.060315Z","shell.execute_reply":"2025-10-25T15:15:52.073725Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"X, y = featureCreation(trainDF, \"Survived\")\nX_test = featureCreation(testDF)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-25T15:15:52.075866Z","iopub.execute_input":"2025-10-25T15:15:52.076185Z","iopub.status.idle":"2025-10-25T15:15:52.140582Z","shell.execute_reply.started":"2025-10-25T15:15:52.076164Z","shell.execute_reply":"2025-10-25T15:15:52.139735Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"X.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-25T15:15:52.141401Z","iopub.execute_input":"2025-10-25T15:15:52.141617Z","iopub.status.idle":"2025-10-25T15:15:52.163878Z","shell.execute_reply.started":"2025-10-25T15:15:52.141600Z","shell.execute_reply":"2025-10-25T15:15:52.162791Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 891 entries, 1 to 891\nData columns (total 15 columns):\n #   Column          Non-Null Count  Dtype   \n---  ------          --------------  -----   \n 0   Pclass          891 non-null    category\n 1   Sex             891 non-null    int64   \n 2   Age             714 non-null    float64 \n 3   Fare            891 non-null    float64 \n 4   Embarked        889 non-null    category\n 5   AgeMissing      891 non-null    int64   \n 6   CabinMissing    891 non-null    int64   \n 7   Deck            891 non-null    category\n 8   Title           891 non-null    category\n 9   Family          891 non-null    int64   \n 10  Alone           891 non-null    int64   \n 11  FamilyCategory  891 non-null    category\n 12  AgeCategory     891 non-null    category\n 13  FarePerPerson   891 non-null    float64 \n 14  Sex_Pclass      891 non-null    category\ndtypes: category(7), float64(3), int64(5)\nmemory usage: 70.1 KB\n","output_type":"stream"}],"execution_count":15},{"cell_type":"code","source":"X.isna().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-25T15:15:52.164922Z","iopub.execute_input":"2025-10-25T15:15:52.165386Z","iopub.status.idle":"2025-10-25T15:15:52.186102Z","shell.execute_reply.started":"2025-10-25T15:15:52.165363Z","shell.execute_reply":"2025-10-25T15:15:52.185361Z"}},"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"Pclass              0\nSex                 0\nAge               177\nFare                0\nEmbarked            2\nAgeMissing          0\nCabinMissing        0\nDeck                0\nTitle               0\nFamily              0\nAlone               0\nFamilyCategory      0\nAgeCategory         0\nFarePerPerson       0\nSex_Pclass          0\ndtype: int64"},"metadata":{}}],"execution_count":16},{"cell_type":"code","source":"X.describe(include=\"all\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-25T15:15:52.186946Z","iopub.execute_input":"2025-10-25T15:15:52.187211Z","iopub.status.idle":"2025-10-25T15:15:52.248543Z","shell.execute_reply.started":"2025-10-25T15:15:52.187181Z","shell.execute_reply":"2025-10-25T15:15:52.247829Z"}},"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"        Pclass         Sex         Age        Fare Embarked  AgeMissing  \\\ncount    891.0  891.000000  714.000000  891.000000      889  891.000000   \nunique     3.0         NaN         NaN         NaN        3         NaN   \ntop        3.0         NaN         NaN         NaN        S         NaN   \nfreq     491.0         NaN         NaN         NaN      644         NaN   \nmean       NaN    0.647587   29.699118   32.204208      NaN    0.198653   \nstd        NaN    0.477990   14.526497   49.693429      NaN    0.399210   \nmin        NaN    0.000000    0.420000    0.000000      NaN    0.000000   \n25%        NaN    0.000000   20.125000    7.910400      NaN    0.000000   \n50%        NaN    1.000000   28.000000   14.454200      NaN    0.000000   \n75%        NaN    1.000000   38.000000   31.000000      NaN    0.000000   \nmax        NaN    1.000000   80.000000  512.329200      NaN    1.000000   \n\n        CabinMissing Deck Title      Family       Alone FamilyCategory  \\\ncount     891.000000  891   891  891.000000  891.000000            891   \nunique           NaN    8     4         NaN         NaN              3   \ntop              NaN    E    Mr         NaN         NaN          Small   \nfreq             NaN  511   536         NaN         NaN            698   \nmean        0.771044  NaN   NaN    1.904602    0.602694            NaN   \nstd         0.420397  NaN   NaN    1.613459    0.489615            NaN   \nmin         0.000000  NaN   NaN    1.000000    0.000000            NaN   \n25%         1.000000  NaN   NaN    1.000000    0.000000            NaN   \n50%         1.000000  NaN   NaN    1.000000    1.000000            NaN   \n75%         1.000000  NaN   NaN    2.000000    1.000000            NaN   \nmax         1.000000  NaN   NaN   11.000000    1.000000            NaN   \n\n       AgeCategory  FarePerPerson Sex_Pclass  \ncount          891     891.000000        891  \nunique           5            NaN          6  \ntop          Adult            NaN     True_3  \nfreq           524            NaN        347  \nmean           NaN      19.916375        NaN  \nstd            NaN      35.841257        NaN  \nmin            NaN       0.000000        NaN  \n25%            NaN       7.250000        NaN  \n50%            NaN       8.300000        NaN  \n75%            NaN      23.666667        NaN  \nmax            NaN     512.329200        NaN  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>AgeMissing</th>\n      <th>CabinMissing</th>\n      <th>Deck</th>\n      <th>Title</th>\n      <th>Family</th>\n      <th>Alone</th>\n      <th>FamilyCategory</th>\n      <th>AgeCategory</th>\n      <th>FarePerPerson</th>\n      <th>Sex_Pclass</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>891.0</td>\n      <td>891.000000</td>\n      <td>714.000000</td>\n      <td>891.000000</td>\n      <td>889</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891</td>\n      <td>891</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891</td>\n      <td>891</td>\n      <td>891.000000</td>\n      <td>891</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>3.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>8</td>\n      <td>4</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3</td>\n      <td>5</td>\n      <td>NaN</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>3.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>E</td>\n      <td>Mr</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Small</td>\n      <td>Adult</td>\n      <td>NaN</td>\n      <td>True_3</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>491.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>644</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>511</td>\n      <td>536</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>698</td>\n      <td>524</td>\n      <td>NaN</td>\n      <td>347</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>NaN</td>\n      <td>0.647587</td>\n      <td>29.699118</td>\n      <td>32.204208</td>\n      <td>NaN</td>\n      <td>0.198653</td>\n      <td>0.771044</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.904602</td>\n      <td>0.602694</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>19.916375</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>NaN</td>\n      <td>0.477990</td>\n      <td>14.526497</td>\n      <td>49.693429</td>\n      <td>NaN</td>\n      <td>0.399210</td>\n      <td>0.420397</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.613459</td>\n      <td>0.489615</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>35.841257</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>NaN</td>\n      <td>0.000000</td>\n      <td>0.420000</td>\n      <td>0.000000</td>\n      <td>NaN</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.000000</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>NaN</td>\n      <td>0.000000</td>\n      <td>20.125000</td>\n      <td>7.910400</td>\n      <td>NaN</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>7.250000</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>NaN</td>\n      <td>1.000000</td>\n      <td>28.000000</td>\n      <td>14.454200</td>\n      <td>NaN</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>8.300000</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>NaN</td>\n      <td>1.000000</td>\n      <td>38.000000</td>\n      <td>31.000000</td>\n      <td>NaN</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2.000000</td>\n      <td>1.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>23.666667</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>NaN</td>\n      <td>1.000000</td>\n      <td>80.000000</td>\n      <td>512.329200</td>\n      <td>NaN</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>11.000000</td>\n      <td>1.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>512.329200</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":17},{"cell_type":"code","source":"from sklearn.base import BaseEstimator, TransformerMixin\n\nclass CatToString(BaseEstimator, TransformerMixin):\n    def fit(self, X, y=None):\n        return self\n    def transform(self, X):\n        return X.astype(str)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-25T15:15:52.249322Z","iopub.execute_input":"2025-10-25T15:15:52.249549Z","iopub.status.idle":"2025-10-25T15:15:52.254607Z","shell.execute_reply.started":"2025-10-25T15:15:52.249531Z","shell.execute_reply":"2025-10-25T15:15:52.253767Z"}},"outputs":[],"execution_count":18},{"cell_type":"code","source":"num_pipeline = Pipeline([\n    (\"Imputer\", KNNImputer(n_neighbors=2)),\n    (\"Scaler\", StandardScaler())\n])\n\ncat_pipeline = Pipeline([\n    (\"Imputer\", SimpleImputer(strategy=\"most_frequent\")),\n    (\"Labeler\", OrdinalEncoder(handle_unknown=\"use_encoded_value\", unknown_value=-1))\n])\n\ncatcat_pipeline = Pipeline([\n    (\"Imputer\", SimpleImputer(strategy=\"most_frequent\")),\n    (\"ToString\", CatToString())  # convert floats to strings\n])\n\ndataPipeline = ColumnTransformer([\n    (\"num\", num_pipeline, make_column_selector(dtype_exclude= \"category\")),\n    (\"cat\", cat_pipeline, make_column_selector(dtype_include= \"category\"))\n])\ncatDataPipeline = ColumnTransformer([\n    (\"cat\", catcat_pipeline, make_column_selector(dtype_include= \"category\")),\n    (\"num\", num_pipeline, make_column_selector(dtype_exclude= \"category\"))\n])\n\nxgb = Pipeline([\n    (\"transformer\", dataPipeline),\n    (\"xgb\", XGBClassifier(\n        random_state=42,\n        enable_categorical = True,\n        #early_stopping_rounds=50,\n        n_estimators=500,\n    ))\n])\n\nlgbm = Pipeline([\n    (\"transformer\", dataPipeline),\n    (\"lgbm\", LGBMClassifier(\n        random_state=42,\n        #early_stopping_rounds=50,\n        n_estimators=500,\n        verbose=-1\n    ))\n])\n\ncat_col = list(range(len(X.select_dtypes(include='category').columns)))\ncat = Pipeline([\n    (\"transformer\", catDataPipeline),\n    (\"catboost\", CatBoostClassifier(\n        random_state=42,\n        cat_features=cat_col,\n        n_estimators=500,\n        verbose=False\n    ))\n])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-25T15:15:52.255563Z","iopub.execute_input":"2025-10-25T15:15:52.255877Z","iopub.status.idle":"2025-10-25T15:15:52.275711Z","shell.execute_reply.started":"2025-10-25T15:15:52.255855Z","shell.execute_reply":"2025-10-25T15:15:52.274760Z"}},"outputs":[],"execution_count":19},{"cell_type":"markdown","source":"## Base score","metadata":{}},{"cell_type":"code","source":"cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n\nscores_xgb = cross_val_score(xgb, X, y, cv=cv, scoring='accuracy')\nscores_lgbm = cross_val_score(lgbm, X, y, cv=cv, scoring='accuracy')\nscores_cat = cross_val_score(cat, X, y, cv=cv, scoring='accuracy')\n\nprint(\"XGB - Cross-validation scores:\", scores_xgb, end= \"  \")\nprint(\"Average accuracy:\", scores_xgb.mean())\nprint(\"CAT - Cross-validation scores:\", scores_cat, end= \"  \")\nprint(\"Average accuracy:\", scores_cat.mean())\nprint(\"LGBM - Cross-validation scores:\", scores_lgbm, end= \"  \")\nprint(\"Average accuracy:\", scores_lgbm.mean())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-25T15:15:52.276576Z","iopub.execute_input":"2025-10-25T15:15:52.276955Z","iopub.status.idle":"2025-10-25T15:16:07.162988Z","shell.execute_reply.started":"2025-10-25T15:15:52.276923Z","shell.execute_reply":"2025-10-25T15:16:07.162053Z"}},"outputs":[{"name":"stdout","text":"XGB - Cross-validation scores: [0.83798883 0.83707865 0.80337079 0.81460674 0.83707865]  Average accuracy: 0.8260247316552632\nCAT - Cross-validation scores: [0.8547486  0.84269663 0.82022472 0.84269663 0.83146067]  Average accuracy: 0.8383654510074697\nLGBM - Cross-validation scores: [0.8547486  0.83707865 0.78651685 0.80337079 0.83146067]  Average accuracy: 0.822635113928818\n","output_type":"stream"}],"execution_count":20},{"cell_type":"markdown","source":"## HyperTuning","metadata":{}},{"cell_type":"code","source":"xgb_params = {\n    \"xgb__n_estimators\": [500, 1000, 2000, 3000, 4000],\n    \"xgb__learning_rate\": [0.001, 0.01, 0.05, 0.1],\n    \"xgb__max_depth\": [3, 5, 7, 9],\n    \"xgb__min_child_weight\": [1, 3, 5, 7],\n    \"xgb__subsample\": [0.6, 0.8, 1.0],\n    \"xgb__colsample_bytree\": [0.6, 0.8, 1.0],\n    \"xgb__gamma\": [0, 0.1, 0.3, 1],\n    \"xgb__reg_alpha\": [0, 0.1, 1, 5],\n    \"xgb__reg_lambda\": [1, 3, 5, 10]\n}\n\nlgbm_params = {\n    \"lgbm__n_estimators\": [500, 1000, 2000, 3000, 4000],\n    \"lgbm__learning_rate\": [0.001, 0.01, 0.05, 0.1],\n    \"lgbm__num_leaves\": [31, 50, 100, 200],\n    \"lgbm__max_depth\": [3, 5, 7, -1],\n    \"lgbm__min_child_samples\": [10, 20, 50],\n    \"lgbm__subsample\": [0.6, 0.8, 1.0],\n    \"lgbm__colsample_bytree\": [0.6, 0.8, 1.0],\n    \"lgbm__reg_alpha\": [0, 0.1, 1, 5],\n    \"lgbm__reg_lambda\": [0, 0.1, 1, 5],\n    \"lgbm__min_split_gain\": [0, 0.1, 0.5]\n}\n\ncatboost_params = {\n    \"catboost__n_estimators\": [500, 1000, 2000, 3000, 4000],\n    \"catboost__learning_rate\": [0.001, 0.01, 0.03, 0.1],\n    \"catboost__depth\": [4, 6, 8, 10],\n    \"catboost__l2_leaf_reg\": [1, 3, 5, 7, 9],\n    \"catboost__bagging_temperature\": [0.0, 0.3, 1, 3],\n    \"catboost__border_count\": [32, 64, 128, 254],\n    \"catboost__random_strength\": [1, 2, 5],\n    \"catboost__rsm\": [0.6, 0.8, 1.0],\n    \"catboost__grow_policy\": ['SymmetricTree', 'Depthwise', 'Lossguide']\n}\n\n\nxgb_search = RandomizedSearchCV(\n    xgb, xgb_params, cv=cv, scoring=\"accuracy\", n_iter=30, verbose=1, n_jobs=-1\n)\n\nlgbm_search = RandomizedSearchCV(\n    lgbm, lgbm_params, cv=cv, scoring=\"accuracy\", n_iter=30, verbose=1, n_jobs=-1\n)\n\ncat_search = RandomizedSearchCV(\n    cat, catboost_params, cv=cv, scoring=\"accuracy\", n_iter=30, verbose=1, n_jobs=-1\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-25T15:16:07.166230Z","iopub.execute_input":"2025-10-25T15:16:07.167698Z","iopub.status.idle":"2025-10-25T15:16:07.177462Z","shell.execute_reply.started":"2025-10-25T15:16:07.167636Z","shell.execute_reply":"2025-10-25T15:16:07.176523Z"}},"outputs":[],"execution_count":21},{"cell_type":"code","source":"xgb_search.fit(X, y)\nlgbm_search.fit(X, y)\ncat_search.fit(X, y)\n\nprint(\"Best XGB params:\", xgb_search.best_params_, end=\"\\n\\n\")\nprint(\"Best LGBM params:\", lgbm_search.best_params_, end=\"\\n\\n\")\nprint(\"Best CatBoost params:\", cat_search.best_params_, end=\"\\n\\n\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-25T15:16:07.178523Z","iopub.execute_input":"2025-10-25T15:16:07.178864Z"}},"outputs":[{"name":"stdout","text":"Fitting 5 folds for each of 30 candidates, totalling 150 fits\nFitting 5 folds for each of 30 candidates, totalling 150 fits\nFitting 5 folds for each of 30 candidates, totalling 150 fits\n","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":"xgb.set_params(**xgb_search.best_params_)\nlgbm.set_params(**lgbm_search.best_params_)\ncat.set_params(**cat_search.best_params_)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"scores_xgb = cross_val_score(xgb, X, y, cv=cv, scoring='accuracy')\nscores_lgbm = cross_val_score(lgbm, X, y, cv=cv, scoring='accuracy')\nscores_cat = cross_val_score(cat, X, y, cv=cv, scoring='accuracy')\n\nprint(\"Cross-validation scores:\", scores_xgb, end= \"  \")\nprint(\"Average accuracy:\", scores_xgb.mean())\nprint(\"Cross-validation scores:\", scores_cat, end= \"  \")\nprint(\"Average accuracy:\", scores_cat.mean())\nprint(\"Cross-validation scores:\", scores_lgbm, end= \"  \")\nprint(\"Average accuracy:\", scores_lgbm.mean())","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"y_pred_cat = cross_val_predict(cat, X, y, cv=cv, method=\"predict\")\ny_pred_xgb = cross_val_predict(xgb, X, y, cv=cv, method=\"predict\")\ny_pred_lgbm = cross_val_predict(lgbm, X, y, cv=cv, method=\"predict\")\n\ncm_cat = confusion_matrix(y, y_pred_cat)\ncm_xgb = confusion_matrix(y, y_pred_xgb)\ncm_lgbm = confusion_matrix(y, y_pred_lgbm)\n\ncat_score = accuracy_score(y, y_pred_cat)\nxgb_score = accuracy_score(y, y_pred_xgb)\nlgbm_score = accuracy_score(y, y_pred_lgbm)\n\nfig, ax = plt.subplots(1, 3, figsize=(24, 6))\n\nsns.heatmap(cm_cat, cmap=\"YlGnBu\", annot=True, fmt='g', ax=ax[0])\nsns.heatmap(cm_xgb, cmap=\"YlGnBu\", annot=True, fmt='g', ax=ax[1])\nsns.heatmap(cm_lgbm, cmap=\"YlGnBu\", annot=True, fmt='g', ax=ax[2])\n\nax[0].set_title(f\"CatBoost: {cat_score:.2f}\")\nax[1].set_title(f\"XGBoost: {xgb_score:.2f}\")\nax[2].set_title(f\"LightGBM: {lgbm_score:.2f}\")\n\nplt.show()\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Retrieving Predictions\n### Prediction Probability for Survival","metadata":{}},{"cell_type":"code","source":"meta_cat = cross_val_predict(cat, X, y, cv=cv, method=\"predict_proba\")[:,1]\nmeta_xgb = cross_val_predict(xgb, X, y, cv=cv, method=\"predict_proba\")[:,1]\nmeta_lgbm = cross_val_predict(lgbm, X, y, cv=cv, method=\"predict_proba\")[:,1]\n\nmeta_X = np.column_stack([meta_cat, meta_xgb, meta_lgbm])\nnp.shape(meta_X)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"meta_params = {\n    \"penalty\": [\"l1\", \"l2\", \"elasticnet\"],\n    \"C\": [0.01, 0.1, 1, 10, 100],\n    \"solver\": [\"liblinear\", \"saga\", \"lbfgs\", \"sag\", \"newton-cg\"],\n    \"class_weight\": [None, \"balanced\"],\n    \"max_iter\": [100, 500, 1000],\n    \"tol\": [1e-4, 1e-3, 1e-2],\n    \"multi_class\": [\"auto\", \"ovr\", \"multinomial\"],\n    \"fit_intercept\": [True, False],\n    #\"l1_ratio\": [0, 0.25, 0.5, 0.75, 1]  # Only used if penalty='elasticnet'\n}\n\n\nmeta = LogisticRegression()\nmeta.fit(meta_X, y)\n\nscores_meta = cross_val_score(meta, meta_X, y, cv=cv, scoring='accuracy')\nprint(\"Cross-validation scores:\", scores_meta, end= \"  \")\nprint(\"Average accuracy:\", scores_meta.mean())\n\nmeta_search = RandomizedSearchCV(\n    meta, meta_params, cv=cv, scoring=\"accuracy\", n_iter=30, verbose=1, n_jobs=-1\n)\n\nmeta_search.fit(meta_X, y)\n\nprint(\"Best XGB params:\", meta_search.best_params_)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"meta.set_params(**meta_search.best_params_)\nscores_meta = cross_val_score(meta, meta_X, y, cv=cv, scoring='accuracy')\n\nprint(\"Cross-validation scores:\", scores_meta, end= \"  \")\nprint(\"Average accuracy:\", scores_meta.mean())","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"y_pred_meta = cross_val_predict(meta, meta_X, y, cv=cv, method=\"predict\")\ncm_meta = confusion_matrix(y, y_pred_meta)\nmeta_score = accuracy_score(y, y_pred_meta)\n\nfig, ax = plt.subplots(2, 2, figsize=(15, 10))\n\nsns.heatmap(cm_cat, cmap=\"YlGnBu\", annot=True, fmt='g', ax=ax[0,0])\nsns.heatmap(cm_xgb, cmap=\"YlGnBu\", annot=True, fmt='g', ax=ax[0,1])\nsns.heatmap(cm_lgbm, cmap=\"YlGnBu\", annot=True, fmt='g', ax=ax[1,0])\nsns.heatmap(cm_meta, cmap=\"YlGnBu\", annot=True, fmt='g', ax=ax[1,1])\n\nax[0,0].set_title(f\"CatBoost: {cat_score:.4f}\")\nax[0,1].set_title(f\"XGBoost: {xgb_score:.4f}\")\nax[1,0].set_title(f\"LightGBM: {lgbm_score:.4f}\")\nax[1,1].set_title(f\"Meta: {meta_score:.4f}\")\n\nplt.show()\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"xgb_pred = xgb.fit(X, y).predict_proba(X_test)[:,1]\nlgbm_pred = lgbm.fit(X, y).predict_proba(X_test)[:,1]\ncat_pred = cat.fit(X, y).predict_proba(X_test)[:,1]\n\nmeta_X_test = np.column_stack([cat_pred, xgb_pred, lgbm_pred])","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_final = pd.DataFrame({\"Survived\": meta.predict(meta_X_test)}, index=X_test.index)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_final.head()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_final.to_csv(\"/kaggle/working/\" + \"submission.csv\")","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}