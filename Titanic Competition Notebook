{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"isSourceIdPinned":false,"sourceType":"competition"}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-10-19T16:41:39.954251Z","iopub.execute_input":"2025-10-19T16:41:39.954548Z","iopub.status.idle":"2025-10-19T16:41:39.963439Z","shell.execute_reply.started":"2025-10-19T16:41:39.954528Z","shell.execute_reply":"2025-10-19T16:41:39.962640Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/titanic/train.csv\n/kaggle/input/titanic/test.csv\n/kaggle/input/titanic/gender_submission.csv\n","output_type":"stream"}],"execution_count":38},{"cell_type":"markdown","source":"# Import modules","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\n\nfrom itertools import product\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import RandomizedSearchCV, StratifiedKFold, cross_val_score, train_test_split\n\nfrom xgboost import XGBClassifier\n\n# warnings\nwarnings.filterwarnings(\"ignore\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-19T16:41:39.964644Z","iopub.execute_input":"2025-10-19T16:41:39.965042Z","iopub.status.idle":"2025-10-19T16:41:39.983646Z","shell.execute_reply.started":"2025-10-19T16:41:39.965021Z","shell.execute_reply":"2025-10-19T16:41:39.982708Z"}},"outputs":[],"execution_count":39},{"cell_type":"code","source":"trainDF = pd.read_csv(\"/kaggle/input/titanic/train.csv\", index_col=0)\ntestDF = pd.read_csv(\"/kaggle/input/titanic/test.csv\", index_col=0)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-19T16:41:39.984563Z","iopub.execute_input":"2025-10-19T16:41:39.984847Z","iopub.status.idle":"2025-10-19T16:41:40.012152Z","shell.execute_reply.started":"2025-10-19T16:41:39.984817Z","shell.execute_reply":"2025-10-19T16:41:40.011163Z"}},"outputs":[],"execution_count":40},{"cell_type":"code","source":"print(\"trainDF missing values:\")\nprint(trainDF.isnull().sum(), end=\"\\n\\n\")\nprint(\"testDF missing values:\")\nprint(testDF.isnull().sum(), end=\"\\n\\n\")\nprint(\"trainDF unique values:\")\nprint(trainDF.nunique(), end=\"\\n\\n\")\nprint(\"testDF unique values:\")\nprint(testDF.nunique(), end=\"\\n\\n\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-19T16:41:40.014403Z","iopub.execute_input":"2025-10-19T16:41:40.014696Z","iopub.status.idle":"2025-10-19T16:41:40.029955Z","shell.execute_reply.started":"2025-10-19T16:41:40.014676Z","shell.execute_reply":"2025-10-19T16:41:40.028990Z"}},"outputs":[{"name":"stdout","text":"trainDF missing values:\nSurvived      0\nPclass        0\nName          0\nSex           0\nAge         177\nSibSp         0\nParch         0\nTicket        0\nFare          0\nCabin       687\nEmbarked      2\ndtype: int64\n\ntestDF missing values:\nPclass        0\nName          0\nSex           0\nAge          86\nSibSp         0\nParch         0\nTicket        0\nFare          1\nCabin       327\nEmbarked      0\ndtype: int64\n\ntrainDF unique values:\nSurvived      2\nPclass        3\nName        891\nSex           2\nAge          88\nSibSp         7\nParch         7\nTicket      681\nFare        248\nCabin       147\nEmbarked      3\ndtype: int64\n\ntestDF unique values:\nPclass        3\nName        418\nSex           2\nAge          79\nSibSp         7\nParch         8\nTicket      363\nFare        169\nCabin        76\nEmbarked      3\ndtype: int64\n\n","output_type":"stream"}],"execution_count":41},{"cell_type":"code","source":"trainDF.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-19T16:41:40.030889Z","iopub.execute_input":"2025-10-19T16:41:40.031121Z","iopub.status.idle":"2025-10-19T16:41:40.053210Z","shell.execute_reply.started":"2025-10-19T16:41:40.031102Z","shell.execute_reply":"2025-10-19T16:41:40.051783Z"}},"outputs":[{"execution_count":42,"output_type":"execute_result","data":{"text/plain":"             Survived  Pclass  \\\nPassengerId                     \n1                   0       3   \n2                   1       1   \n3                   1       3   \n4                   1       1   \n5                   0       3   \n\n                                                          Name     Sex   Age  \\\nPassengerId                                                                    \n1                                      Braund, Mr. Owen Harris    male  22.0   \n2            Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0   \n3                                       Heikkinen, Miss. Laina  female  26.0   \n4                 Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0   \n5                                     Allen, Mr. William Henry    male  35.0   \n\n             SibSp  Parch            Ticket     Fare Cabin Embarked  \nPassengerId                                                          \n1                1      0         A/5 21171   7.2500   NaN        S  \n2                1      0          PC 17599  71.2833   C85        C  \n3                0      0  STON/O2. 3101282   7.9250   NaN        S  \n4                1      0            113803  53.1000  C123        S  \n5                0      0            373450   8.0500   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n    <tr>\n      <th>PassengerId</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":42},{"cell_type":"code","source":"testDF.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-19T16:41:40.054131Z","iopub.execute_input":"2025-10-19T16:41:40.054425Z","iopub.status.idle":"2025-10-19T16:41:40.078418Z","shell.execute_reply.started":"2025-10-19T16:41:40.054398Z","shell.execute_reply":"2025-10-19T16:41:40.077367Z"}},"outputs":[{"execution_count":43,"output_type":"execute_result","data":{"text/plain":"             Pclass                                          Name     Sex  \\\nPassengerId                                                                 \n892               3                              Kelly, Mr. James    male   \n893               3              Wilkes, Mrs. James (Ellen Needs)  female   \n894               2                     Myles, Mr. Thomas Francis    male   \n895               3                              Wirz, Mr. Albert    male   \n896               3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n\n              Age  SibSp  Parch   Ticket     Fare Cabin Embarked  \nPassengerId                                                       \n892          34.5      0      0   330911   7.8292   NaN        Q  \n893          47.0      1      0   363272   7.0000   NaN        S  \n894          62.0      0      0   240276   9.6875   NaN        Q  \n895          27.0      0      0   315154   8.6625   NaN        S  \n896          22.0      1      1  3101298  12.2875   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n    <tr>\n      <th>PassengerId</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>892</th>\n      <td>3</td>\n      <td>Kelly, Mr. James</td>\n      <td>male</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330911</td>\n      <td>7.8292</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>893</th>\n      <td>3</td>\n      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n      <td>female</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>363272</td>\n      <td>7.0000</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>894</th>\n      <td>2</td>\n      <td>Myles, Mr. Thomas Francis</td>\n      <td>male</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>240276</td>\n      <td>9.6875</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>895</th>\n      <td>3</td>\n      <td>Wirz, Mr. Albert</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>315154</td>\n      <td>8.6625</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>896</th>\n      <td>3</td>\n      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n      <td>female</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3101298</td>\n      <td>12.2875</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":43},{"cell_type":"markdown","source":"# Visuals of the categorical data","metadata":{}},{"cell_type":"code","source":"sns.barplot(data=trainDF, x=\"Pclass\", y=trainDF.index, hue=\"Survived\", palette=\"Spectral\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-19T16:41:40.079452Z","iopub.execute_input":"2025-10-19T16:41:40.079695Z","iopub.status.idle":"2025-10-19T16:41:40.471343Z","shell.execute_reply.started":"2025-10-19T16:41:40.079677Z","shell.execute_reply":"2025-10-19T16:41:40.470343Z"}},"outputs":[{"execution_count":44,"output_type":"execute_result","data":{"text/plain":"<Axes: xlabel='Pclass', ylabel='PassengerId'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"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2LBBY8eOldVqVWBgoJKSkjRligvfDQUAANyKW4WdHTt22M37+fkpLS1NaWlpV9wmOjpaGzdubODKAADA9crlz9kBAABoSIQdAABgaIQdAABgaG41ZgcAjMYcGnTZzwAaD2EHABrQ6GeHuroE4IbHZSwAAGBohB0AAGBohB0AAGBohB0AAGBohB0AAGBohB0AAGBohB0AAGBohB0AAGBohB0AAGBohB0AAGBohB0AAGBohB0AAGBohB0AAGBohB0AAGBohB0AAGBohB0AAGBohB0AAGBohB0AAGBoXq4uAPUXFux72c8AAICwYwhTk253dQkAALgtLmMBAABDI+wAAABDI+wAAABDI+wAAABDY4AyAAA3EHNo0GU/GxlhBwCAG8joZ4e6uoRGx2UsAABgaIQdAABgaIQdAABgaIQdAABgaIQdAABgaFd9N1ZKSspV73T27NkOFQMAAOBsVx12vvjiC7v5ffv2qbq6Wu3atZMkHT16VJ6enoqNjXVuhQAAAPVw1WFn+/btts+zZ89WcHCwli1bpiZNmkiSzpw5o9GjR+vuu+92fpUAAAAOcmjMzqxZszRt2jRb0JGkJk2a6KWXXtKsWbOcVhwAAEB9ORR2SkpKVFRUdMnyoqIinTt3rt5FAQAAOItDYef+++/X6NGj9d577+n777/X999/rzVr1mjMmDEaPny4s2sEAABwmEPvxlq0aJGeeuopjRw5UlVVVRd25OWlMWPGaObMmU4tEAAAoD4cCjsBAQFasGCBZs6cqW+++UaSdPPNNyswMNCpxQEAANRXvd56HhgYqE6dOjmrFgAAAKe7prBzteNx3nvvPYeKAQAAcLZrCjshISENVQcAAECDuKaws3Tp0oaqAwAAoEFc863nVVVV8vLy0ldffdUQ9QAAADjVNYcdb29vRUVFqaampiHqAQAAcCqHHir4X//1X/rzn/+s06dPO7seAAAAp3Lo1vPXX39dx48fV2RkpKKjoy95vs6+ffucUhwAAEB9ORR2hg0b5uQyAAAAGoZDYWfy5MnOrgMAAKBBODRmR5LOnj2rN998U6mpqbaxO/v27dO//vUvpxUHAABQXw717Hz55ZeKi4tTSEiIvv32Wz366KMKCwvTe++9p9zcXL311lvOrhMAAMAhDvXspKSkaNSoUTp27Jj8/PxsywcNGqSdO3de9X4WLlyoTp06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FdebTCZNmTJFU6ZMuWKbsLAwrVixoiHKAwAABuC2Y3YAAACcgbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMjbADAAAMzTBhJy0tTTfddJP8/PzUvXt3ffbZZ64uCQAAuAFDhJ1Vq1YpJSVFkydP1r59+9S5c2fFx8ersLDQ1aUBAAAXM0TYmT17th599FGNHj1aMTExWrRokQICArRkyRJXlwYAAFzMy9UF1FdlZaWys7OVmppqW+bh4aG4uDhlZWVddpuKigpVVFTY5ouLiyVJJSUlDtdxrqzc4W2NpOzceVeX4Bbq811yJr6XF/C9vMAdvpd8Jy/gO3lBfb+TF7evq6v72XbXfdj54YcfVFNTo4iICLvlEREROnz48GW3mTZtml588cVLlrdq1apBasSNaLSrCwAug+8l3I1zvpPnzp1TSEjIFddf92HHEampqUpJSbHN19bW6vTp02ratKlMJpMLK7u+lZSUqFWrVjpx4oTMZrOrywEk8b2E++E76Tx1dXU6d+6cIiMjf7bddR92mjVrJk9PTxUUFNgtLygokMViuew2vr6+8vX1tVsWGhraUCXecMxmM/8Cw+3wvYS74TvpHD/Xo3PRdT9A2cfHR7GxscrIyLAtq62tVUZGhqxWqwsrAwAA7uC679mRpJSUFCUlJalbt2668847NXfuXJWVlWn0aK5PAwBwozNE2BkxYoSKioo0adIk5efnq0uXLtq8efMlg5bRsHx9fTV58uRLLhECrsT3Eu6G72TjM9X9u/u1AAAArmPX/ZgdAACAn0PYAQAAhkbYAQAAhkbYAQAAhkbYQb3t3LlTQ4YMUWRkpEwmk9atW+fqknCDmzZtmu644w4FBwcrPDxcw4YN05EjR1xdFm5wCxcuVKdOnWwPE7Rardq0aZOry7ohEHZQb2VlZercubPS0tJcXQogScrMzFRycrL27NmjrVu3qqqqSv3791dZWZmrS8MNrGXLlpo+fbqys7P1+eefq2/fvho6dKgOHTrk6tIMj1vP4VQmk0lr167VsGHDXF0KYFNUVKTw8HBlZmaqV69eri4HsAkLC9PMmTM1ZswYV5diaIZ4qCAA/Jzi4mJJF35YAHdQU1Oj1atXq6ysjFcbNQLCDgBDq62t1YQJE3TXXXfptttuc3U5uMEdPHhQVqtV5eXlCgoK0tq1axUTE+PqsgyPsAPA0JKTk/XVV19p165dri4FULt27bR//34VFxfr3XffVVJSkjIzMwk8DYywA8Cwxo0bpw0bNmjnzp1q2bKlq8sB5OPjo7Zt20qSYmNjtXfvXs2bN09vvPGGiyszNsIOAMOpq6vT+PHjtXbtWu3YsUOtW7d2dUnAZdXW1qqiosLVZRgeYQf1VlpaquPHj9vmc3JytH//foWFhSkqKsqFleFGlZycrBUrVuj9999XcHCw8vPzJUkhISHy9/d3cXW4UaWmpmrgwIGKiorSuXPntGLFCu3YsUMffvihq0szPG49R73t2LFDffr0uWR5UlKS0tPTG78g3PBMJtNlly9dulSjRo1q3GKA/2/MmDHKyMjQyZMnFRISok6dOunZZ59Vv379XF2a4RF2AACAofEEZQAAYGiEHQAAYGiEHQAAYGiEHQAAYGiEHQAAYGiEHQAAYGiEHQAAYGiEHQAAYGiEHQCG0rt3b02YMMHVZQBwI4QdAG5n1KhRMplMMplMtrdET5kyRdXV1a4uDcB1iBeBAnBLAwYM0NKlS1VRUaGNGzcqOTlZ3t7eSk1NdXVpAK4z9OwAcEu+vr6yWCyKjo7W2LFjFRcXpw8++ECS9Mknn6h3794KCAhQkyZNFB8frzNnzlx2P//zP/+jbt26KTg4WBaLRSNHjlRhYaFt/ZkzZ5SYmKjmzZvL399ft9xyi5YuXSpJqqys1Lhx49SiRQv5+fkpOjpa06ZNa/iTB+BU9OwAuC74+/vr1KlT2r9/v+6991797ne/07x58+Tl5aXt27erpqbmsttVVVVp6tSpateunQoLC5WSkqJRo0Zp48aNkqTnn39eX3/9tTZt2qRmzZrp+PHj+vHHHyVJ8+fP1wcffKB33nlHUVFROnHihE6cONFo5wzAOQg7ANxaXV2dMjIy9OGHH2r8+PGaMWOGunXrpgULFtja3HrrrVfc/ne/+53tc5s2bTR//nzdcccdKi0tVVBQkHJzc3X77berW7dukqSbbrrJ1j43N1e33HKLevbsKZPJpOjoaOefIIAGx2UsAG5pw4YNCgoKkp+fnwYOHKgRI0bohRdesPXsXK3s7GwNGTJEUVFRCg4O1j333CPpQpCRpLFjx2rlypXq0qWLnnnmGe3evdu27ahRo7R//361a9dOf/zjH7VlyxbnniSARkHYAeCW+vTpo/379+vYsWP68ccftWzZMgUGBsrf3/+q91FWVqb4+HiZzWYtX75ce/fu1dq1ayVdGI8jSQMHDtR3332niRMnKi8vT/fee6+eeuopSVLXrl2Vk5OjqVOn6scff9SDDz6oBx54wPknC6BBEXYAuKXAwEC1bdtWUVFR8vL63yvunTp1UkZGxlXt4/Dhwzp16pSmT5+uu+++W+3bt7cbnHxR8+bNlZSUpLfffltz587Vf//3f9vWmc1mjRgxQn/961+1atUqrVmzRqdPn67/CQJoNIzZAXBdSU1NVceOHfWHP/xBjz/+uHx8fLR9+3b9x3/8h5o1a2bXNioqSj4+Pnrttdf0+OOP66uvvtLUqVPt2kyaNEmxsbG69dZbVVFRoQ0bNqhDhw6SpNmzZ6tFixa6/fbb5eHhodWrV8tisSg0NLSxTheAE9CzA+C68stf/lJbtmzRgQMHdOedd8pqter999+36/25qHnz5kpPT9fq1asVExOj6dOn69VXX7Vr4+Pjo9TUVHXq1Em9evWSp6enVq5cKUkKDg62DYi+44479O2332rjxo3y8OA/ncD1xFRXV1fn6iIAAAAaCv97AgAADI2wAwAADI2wAwAADI2wAwAADI2wAwAADI2wAwAADI2wAwAADI2wAwAADI2wAwAADI2wAwAADI2wAwAADO3/Af8pwKHo7SlTAAAAAElFTkSuQmCC\n"},"metadata":{}}],"execution_count":44},{"cell_type":"code","source":"sns.barplot(data=trainDF, x=\"Sex\", y=trainDF.index, hue=\"Survived\", palette=\"Spectral\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-19T16:41:40.472319Z","iopub.execute_input":"2025-10-19T16:41:40.472635Z","iopub.status.idle":"2025-10-19T16:41:40.745721Z","shell.execute_reply.started":"2025-10-19T16:41:40.472609Z","shell.execute_reply":"2025-10-19T16:41:40.744798Z"}},"outputs":[{"execution_count":45,"output_type":"execute_result","data":{"text/plain":"<Axes: xlabel='Sex', ylabel='PassengerId'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":45},{"cell_type":"code","source":"sns.barplot(data=trainDF, x=\"Embarked\", y=trainDF.index, hue=\"Survived\", palette=\"Spectral\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-19T16:41:40.748410Z","iopub.execute_input":"2025-10-19T16:41:40.748713Z","iopub.status.idle":"2025-10-19T16:41:41.044447Z","shell.execute_reply.started":"2025-10-19T16:41:40.748692Z","shell.execute_reply":"2025-10-19T16:41:41.043586Z"}},"outputs":[{"execution_count":46,"output_type":"execute_result","data":{"text/plain":"<Axes: xlabel='Embarked', ylabel='PassengerId'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":46},{"cell_type":"markdown","source":"# Feature Creation","metadata":{}},{"cell_type":"code","source":"def features(df1, df2):\n    df1_copy = df1.copy()\n    df2_copy = df2.copy()\n    # cleaning Categorical\n    df1_copy[\"Embarked\"] = df1_copy[\"Embarked\"].fillna(\"S\")\n    df2_copy[\"Embarked\"] = df2_copy[\"Embarked\"].fillna(\"S\")\n    df1_copy = pd.get_dummies(df1_copy, columns=[\"Embarked\"], drop_first=True)\n    df2_copy = pd.get_dummies(df2_copy, columns=[\"Embarked\"], drop_first=True)\n    df1_copy[\"Sex\"] = df1_copy[\"Sex\"].map({\"female\": 0, \"male\": 1})\n    df2_copy[\"Sex\"] = df2_copy[\"Sex\"].map({\"female\": 0, \"male\": 1})\n    df1_copy = pd.get_dummies(df1_copy, columns=[\"Pclass\"], drop_first=True)\n    df2_copy = pd.get_dummies(df2_copy, columns=[\"Pclass\"], drop_first=True)\n    # cleaning numerics\n    # Family is parents + siblings + self\n    df1_copy[\"Family\"] = df1_copy[\"Parch\"] + df1_copy[\"SibSp\"] + 1\n    df2_copy[\"Family\"] = df2_copy[\"Parch\"] + df2_copy[\"SibSp\"] + 1\n\n    median_age = df1_copy[\"Age\"].median()\n    df1_copy[\"Age\"] = df1_copy[\"Age\"].fillna(median_age)\n    df2_copy[\"Age\"] = df2_copy[\"Age\"].fillna(median_age)\n    # dropping unwanted columns\n    \"\"\"\n    Parch & SibSp as they are part of the family and potential for high correlation \n    Name & Cabin & ticket for now it has to many values to clean up\n    \"\"\"\n    drop_cols = [\"Parch\", \"SibSp\", \"Name\", \"Ticket\", \"Cabin\"]\n    df1_copy.drop(drop_cols, axis=1, inplace=True)\n    df2_copy = df2_copy.reindex(columns=df1_copy.columns, fill_value=0).drop(\"Survived\", axis=1)\n\n    return df1_copy, df2_copy","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-19T16:41:41.045375Z","iopub.execute_input":"2025-10-19T16:41:41.045617Z","iopub.status.idle":"2025-10-19T16:41:41.054428Z","shell.execute_reply.started":"2025-10-19T16:41:41.045597Z","shell.execute_reply":"2025-10-19T16:41:41.053448Z"}},"outputs":[],"execution_count":47},{"cell_type":"code","source":"trainDF_cleaned, testDF_cleaned = features(trainDF, testDF)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-19T16:41:41.055529Z","iopub.execute_input":"2025-10-19T16:41:41.056472Z","iopub.status.idle":"2025-10-19T16:41:41.087200Z","shell.execute_reply.started":"2025-10-19T16:41:41.056447Z","shell.execute_reply":"2025-10-19T16:41:41.086450Z"}},"outputs":[],"execution_count":48},{"cell_type":"code","source":"trainDF_cleaned.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-19T16:41:41.088134Z","iopub.execute_input":"2025-10-19T16:41:41.088476Z","iopub.status.idle":"2025-10-19T16:41:41.100936Z","shell.execute_reply.started":"2025-10-19T16:41:41.088444Z","shell.execute_reply":"2025-10-19T16:41:41.100088Z"}},"outputs":[{"execution_count":49,"output_type":"execute_result","data":{"text/plain":"             Survived  Sex   Age     Fare  Embarked_Q  Embarked_S  Pclass_2  \\\nPassengerId                                                                   \n1                   0    1  22.0   7.2500       False        True     False   \n2                   1    0  38.0  71.2833       False       False     False   \n3                   1    0  26.0   7.9250       False        True     False   \n4                   1    0  35.0  53.1000       False        True     False   \n5                   0    1  35.0   8.0500       False        True     False   \n\n             Pclass_3  Family  \nPassengerId                    \n1                True       2  \n2               False       2  \n3                True       1  \n4               False       2  \n5                True       1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Fare</th>\n      <th>Embarked_Q</th>\n      <th>Embarked_S</th>\n      <th>Pclass_2</th>\n      <th>Pclass_3</th>\n      <th>Family</th>\n    </tr>\n    <tr>\n      <th>PassengerId</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>1</td>\n      <td>22.0</td>\n      <td>7.2500</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>0</td>\n      <td>38.0</td>\n      <td>71.2833</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>0</td>\n      <td>26.0</td>\n      <td>7.9250</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>0</td>\n      <td>35.0</td>\n      <td>53.1000</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>8.0500</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":49},{"cell_type":"code","source":"testDF_cleaned.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-19T16:41:41.101974Z","iopub.execute_input":"2025-10-19T16:41:41.102265Z","iopub.status.idle":"2025-10-19T16:41:41.125717Z","shell.execute_reply.started":"2025-10-19T16:41:41.102235Z","shell.execute_reply":"2025-10-19T16:41:41.124821Z"}},"outputs":[{"execution_count":50,"output_type":"execute_result","data":{"text/plain":"             Sex   Age     Fare  Embarked_Q  Embarked_S  Pclass_2  Pclass_3  \\\nPassengerId                                                                   \n892            1  34.5   7.8292        True       False     False      True   \n893            0  47.0   7.0000       False        True     False      True   \n894            1  62.0   9.6875        True       False      True     False   \n895            1  27.0   8.6625       False        True     False      True   \n896            0  22.0  12.2875       False        True     False      True   \n\n             Family  \nPassengerId          \n892               1  \n893               2  \n894               1  \n895               1  \n896               3  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Fare</th>\n      <th>Embarked_Q</th>\n      <th>Embarked_S</th>\n      <th>Pclass_2</th>\n      <th>Pclass_3</th>\n      <th>Family</th>\n    </tr>\n    <tr>\n      <th>PassengerId</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>892</th>\n      <td>1</td>\n      <td>34.5</td>\n      <td>7.8292</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>893</th>\n      <td>0</td>\n      <td>47.0</td>\n      <td>7.0000</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>894</th>\n      <td>1</td>\n      <td>62.0</td>\n      <td>9.6875</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>895</th>\n      <td>1</td>\n      <td>27.0</td>\n      <td>8.6625</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>896</th>\n      <td>0</td>\n      <td>22.0</td>\n      <td>12.2875</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":50},{"cell_type":"code","source":"trainDF_cleaned.describe(include=\"all\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-19T16:41:41.126717Z","iopub.execute_input":"2025-10-19T16:41:41.127067Z","iopub.status.idle":"2025-10-19T16:41:41.164313Z","shell.execute_reply.started":"2025-10-19T16:41:41.127041Z","shell.execute_reply":"2025-10-19T16:41:41.163568Z"}},"outputs":[{"execution_count":51,"output_type":"execute_result","data":{"text/plain":"          Survived         Sex         Age        Fare Embarked_Q Embarked_S  \\\ncount   891.000000  891.000000  891.000000  891.000000        891        891   \nunique         NaN         NaN         NaN         NaN          2          2   \ntop            NaN         NaN         NaN         NaN      False       True   \nfreq           NaN         NaN         NaN         NaN        814        646   \nmean      0.383838    0.647587   29.361582   32.204208        NaN        NaN   \nstd       0.486592    0.477990   13.019697   49.693429        NaN        NaN   \nmin       0.000000    0.000000    0.420000    0.000000        NaN        NaN   \n25%       0.000000    0.000000   22.000000    7.910400        NaN        NaN   \n50%       0.000000    1.000000   28.000000   14.454200        NaN        NaN   \n75%       1.000000    1.000000   35.000000   31.000000        NaN        NaN   \nmax       1.000000    1.000000   80.000000  512.329200        NaN        NaN   \n\n       Pclass_2 Pclass_3      Family  \ncount       891      891  891.000000  \nunique        2        2         NaN  \ntop       False     True         NaN  \nfreq        707      491         NaN  \nmean        NaN      NaN    1.904602  \nstd         NaN      NaN    1.613459  \nmin         NaN      NaN    1.000000  \n25%         NaN      NaN    1.000000  \n50%         NaN      NaN    1.000000  \n75%         NaN      NaN    2.000000  \nmax         NaN      NaN   11.000000  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Fare</th>\n      <th>Embarked_Q</th>\n      <th>Embarked_S</th>\n      <th>Pclass_2</th>\n      <th>Pclass_3</th>\n      <th>Family</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891</td>\n      <td>891</td>\n      <td>891</td>\n      <td>891</td>\n      <td>891.000000</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>814</td>\n      <td>646</td>\n      <td>707</td>\n      <td>491</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>0.383838</td>\n      <td>0.647587</td>\n      <td>29.361582</td>\n      <td>32.204208</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.904602</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>0.486592</td>\n      <td>0.477990</td>\n      <td>13.019697</td>\n      <td>49.693429</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.613459</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.420000</td>\n      <td>0.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>22.000000</td>\n      <td>7.910400</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>28.000000</td>\n      <td>14.454200</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>35.000000</td>\n      <td>31.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>80.000000</td>\n      <td>512.329200</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>11.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":51},{"cell_type":"code","source":"testDF_cleaned.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-19T16:41:41.165106Z","iopub.execute_input":"2025-10-19T16:41:41.165421Z","iopub.status.idle":"2025-10-19T16:41:41.184124Z","shell.execute_reply.started":"2025-10-19T16:41:41.165399Z","shell.execute_reply":"2025-10-19T16:41:41.183379Z"}},"outputs":[{"execution_count":52,"output_type":"execute_result","data":{"text/plain":"              Sex         Age        Fare      Family\ncount  418.000000  418.000000  417.000000  418.000000\nmean     0.636364   29.805024   35.627188    1.839713\nstd      0.481622   12.667969   55.907576    1.519072\nmin      0.000000    0.170000    0.000000    1.000000\n25%      0.000000   23.000000    7.895800    1.000000\n50%      1.000000   28.000000   14.454200    1.000000\n75%      1.000000   35.750000   31.500000    2.000000\nmax      1.000000   76.000000  512.329200   11.000000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Fare</th>\n      <th>Family</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>418.000000</td>\n      <td>418.000000</td>\n      <td>417.000000</td>\n      <td>418.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>0.636364</td>\n      <td>29.805024</td>\n      <td>35.627188</td>\n      <td>1.839713</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>0.481622</td>\n      <td>12.667969</td>\n      <td>55.907576</td>\n      <td>1.519072</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>0.170000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>0.000000</td>\n      <td>23.000000</td>\n      <td>7.895800</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1.000000</td>\n      <td>28.000000</td>\n      <td>14.454200</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1.000000</td>\n      <td>35.750000</td>\n      <td>31.500000</td>\n      <td>2.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1.000000</td>\n      <td>76.000000</td>\n      <td>512.329200</td>\n      <td>11.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":52},{"cell_type":"markdown","source":"# Creating model\n","metadata":{}},{"cell_type":"code","source":"X = trainDF_cleaned.iloc[:, 1:]\ny = trainDF_cleaned.iloc[:, 0]\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.1, random_state=42)\n\n# Define the model\nxgb = XGBClassifier(\n    use_label_encoder=False,\n    eval_metric=\"logloss\",\n    n_jobs=-1\n)\n\n# Define parameter grid\nparam_grid = {\n    \"n_estimators\": [x for x in range(1300, 1501, 50)],\n    \"max_depth\": [x for x in range(2, 8, 1)],\n    \"learning_rate\": [0.01, 0.03],\n    \"subsample\": [0.5, 0.8, 1.0],\n    \"colsample_bytree\": [0.5, 0.8],\n    \"min_child_weight\": [x for x in range(1,6,2)],\n}\n\n# Define cross-validation strategy\ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n\n# Define GridSearchCV\ngrid_search = RandomizedSearchCV(\n    estimator=xgb,\n    param_distributions=param_grid,  # <-- use param_distributions\n    n_iter=20,                       # number of random combinations to try\n    scoring=\"roc_auc\",\n    cv=cv,\n    verbose=1,\n    n_jobs=-1,\n    random_state=42\n)\n\n# Fit\ngrid_search.fit(X, y)\n\n# Best result\nprint(\"Best parameters:\", grid_search.best_params_)\nprint(\"Best ROC AUC:\", grid_search.best_score_)","metadata":{"execution":{"iopub.status.busy":"2025-10-19T16:41:41.185016Z","iopub.execute_input":"2025-10-19T16:41:41.185261Z","iopub.status.idle":"2025-10-19T16:42:01.324555Z","shell.execute_reply.started":"2025-10-19T16:41:41.185242Z","shell.execute_reply":"2025-10-19T16:42:01.322932Z"},"_kg_hide-input":false,"trusted":true},"outputs":[{"name":"stdout","text":"Fitting 5 folds for each of 20 candidates, totalling 100 fits\nBest parameters: {'subsample': 0.5, 'n_estimators': 1400, 'min_child_weight': 5, 'max_depth': 7, 'learning_rate': 0.03, 'colsample_bytree': 0.8}\nBest ROC AUC: 0.8880663322732001\n","output_type":"stream"}],"execution_count":53},{"cell_type":"markdown","source":"# Prediction","metadata":{}},{"cell_type":"code","source":"model2 = grid_search.best_estimator_\nmodel2.fit(X_train, y_train, eval_set=[(X_train, y_train), (X_val, y_val)], verbose=False)\n\ny_pred = model2.predict(X_val)\n\ncm = confusion_matrix(y_val, y_pred)\nsns.heatmap(cm, cmap=\"YlGnBu\", annot=True, fmt='g')\nprint((cm[0,0]+cm[1,1])/cm.sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-19T16:42:01.325558Z","iopub.execute_input":"2025-10-19T16:42:01.325891Z","iopub.status.idle":"2025-10-19T16:42:02.386529Z","shell.execute_reply.started":"2025-10-19T16:42:01.325864Z","shell.execute_reply":"2025-10-19T16:42:02.385545Z"}},"outputs":[{"name":"stdout","text":"0.8444444444444444\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":54},{"cell_type":"code","source":"model2.fit(X, y, eval_set=[(X_train, y_train), (X_val, y_val)], verbose=False)\ndf_final = pd.DataFrame(data=model2.predict(testDF_cleaned), index=testDF_cleaned.index, columns=[\"Survived\"])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-19T16:42:02.387505Z","iopub.execute_input":"2025-10-19T16:42:02.387793Z","iopub.status.idle":"2025-10-19T16:42:03.427154Z","shell.execute_reply.started":"2025-10-19T16:42:02.387762Z","shell.execute_reply":"2025-10-19T16:42:03.426359Z"}},"outputs":[],"execution_count":55},{"cell_type":"code","source":"df_final.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-19T16:42:03.428107Z","iopub.execute_input":"2025-10-19T16:42:03.428597Z","iopub.status.idle":"2025-10-19T16:42:03.438028Z","shell.execute_reply.started":"2025-10-19T16:42:03.428573Z","shell.execute_reply":"2025-10-19T16:42:03.437348Z"}},"outputs":[{"execution_count":56,"output_type":"execute_result","data":{"text/plain":"             Survived\nPassengerId          \n892                 0\n893                 0\n894                 0\n895                 0\n896                 1","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n    </tr>\n    <tr>\n      <th>PassengerId</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>892</th>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>893</th>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>894</th>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>895</th>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>896</th>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":56},{"cell_type":"code","source":"df_final.to_csv(\"/kaggle/working/\" + \"submission.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-19T16:42:03.438595Z","iopub.execute_input":"2025-10-19T16:42:03.438820Z","iopub.status.idle":"2025-10-19T16:42:03.461478Z","shell.execute_reply.started":"2025-10-19T16:42:03.438801Z","shell.execute_reply":"2025-10-19T16:42:03.460537Z"}},"outputs":[],"execution_count":57}]}