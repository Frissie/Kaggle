{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"isSourceIdPinned":false,"sourceType":"competition"}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-10-12T10:50:40.222431Z","iopub.execute_input":"2025-10-12T10:50:40.222746Z","iopub.status.idle":"2025-10-12T10:50:42.573361Z","shell.execute_reply.started":"2025-10-12T10:50:40.222722Z","shell.execute_reply":"2025-10-12T10:50:42.571753Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/titanic/train.csv\n/kaggle/input/titanic/test.csv\n/kaggle/input/titanic/gender_submission.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"markdown","source":"# Import modules","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport warnings\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler, MinMaxScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.linear_model import LogisticRegression\n\n# warnings\nwarnings.filterwarnings(\"ignore\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T10:50:42.576213Z","iopub.execute_input":"2025-10-12T10:50:42.576600Z","iopub.status.idle":"2025-10-12T10:50:44.908578Z","shell.execute_reply.started":"2025-10-12T10:50:42.576576Z","shell.execute_reply":"2025-10-12T10:50:44.907473Z"}},"outputs":[],"execution_count":2},{"cell_type":"markdown","source":"# Import Data","metadata":{"execution":{"iopub.status.busy":"2025-10-12T10:16:38.612560Z","iopub.execute_input":"2025-10-12T10:16:38.613448Z","iopub.status.idle":"2025-10-12T10:16:38.630238Z","shell.execute_reply.started":"2025-10-12T10:16:38.613408Z","shell.execute_reply":"2025-10-12T10:16:38.629241Z"}}},{"cell_type":"code","source":"columnOrder = [\n 'Survived',\n 'PassengerId',\n 'Pclass',\n 'Name',\n 'Sex',\n 'Age',\n 'SibSp',\n 'Parch',\n 'Ticket',\n 'Fare', \n 'Cabin',\n 'Embarked'\n]\ncolumnDrop = [\n 'PassengerId',\n 'Name',\n 'Ticket',\n 'Cabin',\n 'SibSp',\n 'Parch',\n]\ncolumnNumeric = [\n 'Age',\n 'Fare',\n 'FamilySize'\n]\ncolumnCategory = [\n 'Pclass',\n 'Sex',\n 'Embarked'\n]\n\ndf = pd.read_csv(\"/kaggle/input/titanic/train.csv\")[columnOrder]\nprint(df.info())\ndf.describe(include='all')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T10:51:39.302339Z","iopub.execute_input":"2025-10-12T10:51:39.302662Z","iopub.status.idle":"2025-10-12T10:51:39.352289Z","shell.execute_reply.started":"2025-10-12T10:51:39.302638Z","shell.execute_reply":"2025-10-12T10:51:39.351271Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   Survived     891 non-null    int64  \n 1   PassengerId  891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Name         891 non-null    object \n 4   Sex          891 non-null    object \n 5   Age          714 non-null    float64\n 6   SibSp        891 non-null    int64  \n 7   Parch        891 non-null    int64  \n 8   Ticket       891 non-null    object \n 9   Fare         891 non-null    float64\n 10  Cabin        204 non-null    object \n 11  Embarked     889 non-null    object \ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.7+ KB\nNone\n","output_type":"stream"},{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"          Survived  PassengerId      Pclass                     Name   Sex  \\\ncount   891.000000   891.000000  891.000000                      891   891   \nunique         NaN          NaN         NaN                      891     2   \ntop            NaN          NaN         NaN  Braund, Mr. Owen Harris  male   \nfreq           NaN          NaN         NaN                        1   577   \nmean      0.383838   446.000000    2.308642                      NaN   NaN   \nstd       0.486592   257.353842    0.836071                      NaN   NaN   \nmin       0.000000     1.000000    1.000000                      NaN   NaN   \n25%       0.000000   223.500000    2.000000                      NaN   NaN   \n50%       0.000000   446.000000    3.000000                      NaN   NaN   \n75%       1.000000   668.500000    3.000000                      NaN   NaN   \nmax       1.000000   891.000000    3.000000                      NaN   NaN   \n\n               Age       SibSp       Parch  Ticket        Fare    Cabin  \\\ncount   714.000000  891.000000  891.000000     891  891.000000      204   \nunique         NaN         NaN         NaN     681         NaN      147   \ntop            NaN         NaN         NaN  347082         NaN  B96 B98   \nfreq           NaN         NaN         NaN       7         NaN        4   \nmean     29.699118    0.523008    0.381594     NaN   32.204208      NaN   \nstd      14.526497    1.102743    0.806057     NaN   49.693429      NaN   \nmin       0.420000    0.000000    0.000000     NaN    0.000000      NaN   \n25%      20.125000    0.000000    0.000000     NaN    7.910400      NaN   \n50%      28.000000    0.000000    0.000000     NaN   14.454200      NaN   \n75%      38.000000    1.000000    0.000000     NaN   31.000000      NaN   \nmax      80.000000    8.000000    6.000000     NaN  512.329200      NaN   \n\n       Embarked  \ncount       889  \nunique        3  \ntop           S  \nfreq        644  \nmean        NaN  \nstd         NaN  \nmin         NaN  \n25%         NaN  \n50%         NaN  \n75%         NaN  \nmax         NaN  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891</td>\n      <td>891</td>\n      <td>714.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891</td>\n      <td>891.000000</td>\n      <td>204</td>\n      <td>889</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>891</td>\n      <td>2</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>681</td>\n      <td>NaN</td>\n      <td>147</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>347082</td>\n      <td>NaN</td>\n      <td>B96 B98</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>577</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>7</td>\n      <td>NaN</td>\n      <td>4</td>\n      <td>644</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>0.383838</td>\n      <td>446.000000</td>\n      <td>2.308642</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>29.699118</td>\n      <td>0.523008</td>\n      <td>0.381594</td>\n      <td>NaN</td>\n      <td>32.204208</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>0.486592</td>\n      <td>257.353842</td>\n      <td>0.836071</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>14.526497</td>\n      <td>1.102743</td>\n      <td>0.806057</td>\n      <td>NaN</td>\n      <td>49.693429</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.420000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>NaN</td>\n      <td>0.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>0.000000</td>\n      <td>223.500000</td>\n      <td>2.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>20.125000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>NaN</td>\n      <td>7.910400</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>0.000000</td>\n      <td>446.000000</td>\n      <td>3.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>28.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>NaN</td>\n      <td>14.454200</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1.000000</td>\n      <td>668.500000</td>\n      <td>3.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>38.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>NaN</td>\n      <td>31.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1.000000</td>\n      <td>891.000000</td>\n      <td>3.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>80.000000</td>\n      <td>8.000000</td>\n      <td>6.000000</td>\n      <td>NaN</td>\n      <td>512.329200</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"def DataFrameCleaner(DataFrame):\n    DataFrame[\"FamilySize\"] = DataFrame.SibSp + DataFrame.Parch + 1\n    DataFrame.drop(columnDrop, inplace=True, axis=1)\n    return DataFrame\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T10:56:53.552015Z","iopub.execute_input":"2025-10-12T10:56:53.552398Z","iopub.status.idle":"2025-10-12T10:56:53.557506Z","shell.execute_reply.started":"2025-10-12T10:56:53.552371Z","shell.execute_reply":"2025-10-12T10:56:53.556402Z"}},"outputs":[],"execution_count":6},{"cell_type":"markdown","source":"# Preparing Data\n## Train Test Split","metadata":{}},{"cell_type":"code","source":"df_prep = df.copy()\n\nDataFrameCleaner(df_prep)\n\nrs = 4\ny = df_prep.iloc[:, 0].copy()\nX = df_prep.iloc[:, 1:].copy()\n\nprint(y.head(), X.head())\nprint(y.shape, X.shape)\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.9, random_state = rs)\nprint(X_train.shape, X_test.shape, y_train.shape, y_test.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T10:57:04.414596Z","iopub.execute_input":"2025-10-12T10:57:04.414953Z","iopub.status.idle":"2025-10-12T10:57:04.432355Z","shell.execute_reply.started":"2025-10-12T10:57:04.414928Z","shell.execute_reply":"2025-10-12T10:57:04.431288Z"}},"outputs":[{"name":"stdout","text":"0    0\n1    1\n2    1\n3    1\n4    0\nName: Survived, dtype: int64    Pclass     Sex   Age     Fare Embarked  FamilySize\n0       3    male  22.0   7.2500        S           2\n1       1  female  38.0  71.2833        C           2\n2       3  female  26.0   7.9250        S           1\n3       1  female  35.0  53.1000        S           2\n4       3    male  35.0   8.0500        S           1\n(891,) (891, 6)\n(801, 6) (90, 6) (801,) (90,)\n","output_type":"stream"}],"execution_count":7},{"cell_type":"markdown","source":"## Creating Pipeline","metadata":{}},{"cell_type":"code","source":"numericTransformer = Pipeline([\n    (\"imputer\", SimpleImputer(strategy=\"mean\")),\n    (\"scaler\", StandardScaler())\n])\n\ncategoryTransformer = Pipeline([\n    (\"imputer\", SimpleImputer(strategy=\"most_frequent\")),\n    (\"ohe\", OneHotEncoder(drop='first', handle_unknown='ignore'))\n])\n\npreprocessorLine = ColumnTransformer([\n    (\"num\", numericTransformer, columnNumeric),\n    (\"cat\", categoryTransformer, columnCategory)\n])\n\nmodel = Pipeline([\n    (\"prep\", preprocessorLine),\n    (\"logic\", LogisticRegression())\n])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T11:11:22.632637Z","iopub.execute_input":"2025-10-12T11:11:22.633126Z","iopub.status.idle":"2025-10-12T11:11:22.640251Z","shell.execute_reply.started":"2025-10-12T11:11:22.633005Z","shell.execute_reply":"2025-10-12T11:11:22.638587Z"}},"outputs":[],"execution_count":12},{"cell_type":"markdown","source":"## Model fitting","metadata":{}},{"cell_type":"code","source":"model.fit(X_train, y_train)\nprint(\"model score: %.3f\" % model.score(X_test, y_test))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T11:11:47.164992Z","iopub.execute_input":"2025-10-12T11:11:47.165370Z","iopub.status.idle":"2025-10-12T11:11:47.268474Z","shell.execute_reply.started":"2025-10-12T11:11:47.165345Z","shell.execute_reply":"2025-10-12T11:11:47.267251Z"}},"outputs":[{"name":"stdout","text":"model score: 0.856\n","output_type":"stream"}],"execution_count":14}]}