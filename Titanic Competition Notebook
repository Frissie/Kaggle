{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"isSourceIdPinned":false,"sourceType":"competition"}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Import modules","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\n\nfrom itertools import product\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import RandomizedSearchCV, StratifiedKFold, cross_val_score, train_test_split\n\nfrom xgboost import XGBClassifier\n\n# warnings\nwarnings.filterwarnings(\"ignore\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-21T08:00:54.574005Z","iopub.execute_input":"2025-10-21T08:00:54.574830Z","iopub.status.idle":"2025-10-21T08:00:54.579488Z","shell.execute_reply.started":"2025-10-21T08:00:54.574803Z","shell.execute_reply":"2025-10-21T08:00:54.578701Z"}},"outputs":[],"execution_count":28},{"cell_type":"code","source":"trainDF = pd.read_csv(\"/kaggle/input/titanic/train.csv\", index_col=0)\ntestDF = pd.read_csv(\"/kaggle/input/titanic/test.csv\", index_col=0)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-21T08:00:54.584186Z","iopub.execute_input":"2025-10-21T08:00:54.585200Z","iopub.status.idle":"2025-10-21T08:00:54.614216Z","shell.execute_reply.started":"2025-10-21T08:00:54.585167Z","shell.execute_reply":"2025-10-21T08:00:54.613531Z"}},"outputs":[],"execution_count":29},{"cell_type":"code","source":"print(trainDF.value_counts(\"Cabin\"))","metadata":{"trusted":true,"scrolled":true,"execution":{"iopub.status.busy":"2025-10-21T08:00:54.615920Z","iopub.execute_input":"2025-10-21T08:00:54.616612Z","iopub.status.idle":"2025-10-21T08:00:54.624553Z","shell.execute_reply.started":"2025-10-21T08:00:54.616590Z","shell.execute_reply":"2025-10-21T08:00:54.623669Z"}},"outputs":[{"name":"stdout","text":"Cabin\nC23 C25 C27    4\nG6             4\nB96 B98        4\nF2             3\nC22 C26        3\n              ..\nC101           1\nB94            1\nB86            1\nB82 B84        1\nT              1\nName: count, Length: 147, dtype: int64\n","output_type":"stream"}],"execution_count":30},{"cell_type":"code","source":"print(\"trainDF missing values:\")\nprint(trainDF.isnull().sum(), end=\"\\n\\n\")\nprint(\"testDF missing values:\")\nprint(testDF.isnull().sum(), end=\"\\n\\n\")\nprint(\"trainDF unique values:\")\nprint(trainDF.nunique(), end=\"\\n\\n\")\nprint(\"testDF unique values:\")\nprint(testDF.nunique(), end=\"\\n\\n\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-21T08:00:54.625509Z","iopub.execute_input":"2025-10-21T08:00:54.625901Z","iopub.status.idle":"2025-10-21T08:00:54.649706Z","shell.execute_reply.started":"2025-10-21T08:00:54.625873Z","shell.execute_reply":"2025-10-21T08:00:54.648701Z"}},"outputs":[{"name":"stdout","text":"trainDF missing values:\nSurvived      0\nPclass        0\nName          0\nSex           0\nAge         177\nSibSp         0\nParch         0\nTicket        0\nFare          0\nCabin       687\nEmbarked      2\ndtype: int64\n\ntestDF missing values:\nPclass        0\nName          0\nSex           0\nAge          86\nSibSp         0\nParch         0\nTicket        0\nFare          1\nCabin       327\nEmbarked      0\ndtype: int64\n\ntrainDF unique values:\nSurvived      2\nPclass        3\nName        891\nSex           2\nAge          88\nSibSp         7\nParch         7\nTicket      681\nFare        248\nCabin       147\nEmbarked      3\ndtype: int64\n\ntestDF unique values:\nPclass        3\nName        418\nSex           2\nAge          79\nSibSp         7\nParch         8\nTicket      363\nFare        169\nCabin        76\nEmbarked      3\ndtype: int64\n\n","output_type":"stream"}],"execution_count":31},{"cell_type":"code","source":"trainDF.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-21T08:00:54.650656Z","iopub.execute_input":"2025-10-21T08:00:54.650895Z","iopub.status.idle":"2025-10-21T08:00:54.670512Z","shell.execute_reply.started":"2025-10-21T08:00:54.650877Z","shell.execute_reply":"2025-10-21T08:00:54.669613Z"}},"outputs":[{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"             Survived  Pclass  \\\nPassengerId                     \n1                   0       3   \n2                   1       1   \n3                   1       3   \n4                   1       1   \n5                   0       3   \n\n                                                          Name     Sex   Age  \\\nPassengerId                                                                    \n1                                      Braund, Mr. Owen Harris    male  22.0   \n2            Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0   \n3                                       Heikkinen, Miss. Laina  female  26.0   \n4                 Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0   \n5                                     Allen, Mr. William Henry    male  35.0   \n\n             SibSp  Parch            Ticket     Fare Cabin Embarked  \nPassengerId                                                          \n1                1      0         A/5 21171   7.2500   NaN        S  \n2                1      0          PC 17599  71.2833   C85        C  \n3                0      0  STON/O2. 3101282   7.9250   NaN        S  \n4                1      0            113803  53.1000  C123        S  \n5                0      0            373450   8.0500   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n    <tr>\n      <th>PassengerId</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":32},{"cell_type":"code","source":"testDF.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-21T08:00:54.672880Z","iopub.execute_input":"2025-10-21T08:00:54.673152Z","iopub.status.idle":"2025-10-21T08:00:54.692870Z","shell.execute_reply.started":"2025-10-21T08:00:54.673124Z","shell.execute_reply":"2025-10-21T08:00:54.692112Z"}},"outputs":[{"execution_count":33,"output_type":"execute_result","data":{"text/plain":"             Pclass                                          Name     Sex  \\\nPassengerId                                                                 \n892               3                              Kelly, Mr. James    male   \n893               3              Wilkes, Mrs. James (Ellen Needs)  female   \n894               2                     Myles, Mr. Thomas Francis    male   \n895               3                              Wirz, Mr. Albert    male   \n896               3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n\n              Age  SibSp  Parch   Ticket     Fare Cabin Embarked  \nPassengerId                                                       \n892          34.5      0      0   330911   7.8292   NaN        Q  \n893          47.0      1      0   363272   7.0000   NaN        S  \n894          62.0      0      0   240276   9.6875   NaN        Q  \n895          27.0      0      0   315154   8.6625   NaN        S  \n896          22.0      1      1  3101298  12.2875   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n    <tr>\n      <th>PassengerId</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>892</th>\n      <td>3</td>\n      <td>Kelly, Mr. James</td>\n      <td>male</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330911</td>\n      <td>7.8292</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>893</th>\n      <td>3</td>\n      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n      <td>female</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>363272</td>\n      <td>7.0000</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>894</th>\n      <td>2</td>\n      <td>Myles, Mr. Thomas Francis</td>\n      <td>male</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>240276</td>\n      <td>9.6875</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>895</th>\n      <td>3</td>\n      <td>Wirz, Mr. Albert</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>315154</td>\n      <td>8.6625</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>896</th>\n      <td>3</td>\n      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n      <td>female</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3101298</td>\n      <td>12.2875</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":33},{"cell_type":"markdown","source":"# Visuals of the categorical data","metadata":{}},{"cell_type":"code","source":"sns.barplot(data=trainDF, x=\"Pclass\", y=trainDF.index, hue=\"Survived\", palette=\"Spectral\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-21T08:00:54.694140Z","iopub.execute_input":"2025-10-21T08:00:54.694463Z","iopub.status.idle":"2025-10-21T08:00:55.008197Z","shell.execute_reply.started":"2025-10-21T08:00:54.694435Z","shell.execute_reply":"2025-10-21T08:00:55.007341Z"}},"outputs":[{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"<Axes: xlabel='Pclass', ylabel='PassengerId'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":34},{"cell_type":"code","source":"sns.barplot(data=trainDF, x=\"Sex\", y=trainDF.index, hue=\"Survived\", palette=\"Spectral\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-21T08:00:55.009181Z","iopub.execute_input":"2025-10-21T08:00:55.009480Z","iopub.status.idle":"2025-10-21T08:00:55.273805Z","shell.execute_reply.started":"2025-10-21T08:00:55.009451Z","shell.execute_reply":"2025-10-21T08:00:55.272909Z"}},"outputs":[{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"<Axes: xlabel='Sex', ylabel='PassengerId'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":35},{"cell_type":"code","source":"sns.barplot(data=trainDF, x=\"Embarked\", y=trainDF.index, hue=\"Survived\", palette=\"Spectral\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-21T08:00:55.274764Z","iopub.execute_input":"2025-10-21T08:00:55.275063Z","iopub.status.idle":"2025-10-21T08:00:55.592930Z","shell.execute_reply.started":"2025-10-21T08:00:55.275043Z","shell.execute_reply":"2025-10-21T08:00:55.592003Z"}},"outputs":[{"execution_count":36,"output_type":"execute_result","data":{"text/plain":"<Axes: xlabel='Embarked', ylabel='PassengerId'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":36},{"cell_type":"markdown","source":"# Feature Creation","metadata":{}},{"cell_type":"code","source":"def features(df1, df2):\n    df1_copy = df1.copy()\n    df2_copy = df2.copy()\n\n    dfs = [df1_copy, df2_copy]\n    median_age = df1_copy[\"Age\"].median()\n    drop_cols = [\"Parch\", \"SibSp\", \"Name\", \"Ticket\"] \n\n    for i, df in enumerate(dfs):\n        # cleaning Categorical\n        df[\"Embarked\"] = df[\"Embarked\"].fillna(\"S\")\n        df[\"Sex\"] = df[\"Sex\"].map({\"female\": 0, \"male\": 1})\n        df[\"Cabin\"] = df.Cabin.fillna(\"Z\").astype(str)\n        df[\"Cabin\"] = df[\"Cabin\"].apply(lambda x: x[0])\n        df.loc[(df[\"Pclass\"] == 1 ) & (df.Cabin == \"Z\"), [\"Cabin\"]] = \"C\"\n        df.loc[(df[\"Pclass\"] == 2 ) & (df.Cabin == \"Z\"), [\"Cabin\"]] = \"D\"\n        df.loc[(df[\"Pclass\"] == 3 ) & (df.Cabin == \"Z\"), [\"Cabin\"]] = \"F\"\n        df = pd.get_dummies(df, columns=[\"Embarked\"], drop_first=True)\n        df = pd.get_dummies(df, columns=[\"Pclass\"], drop_first=True)\n        df = pd.get_dummies(df, columns=[\"Cabin\"], drop_first=True)\n\n        # cleaning numerics\n        # Family is parents + siblings + self\n        df[\"Family\"] = df[\"Parch\"] + df1_copy[\"SibSp\"] + 1\n        df[\"Age\"] = df[\"Age\"].fillna(median_age)\n\n        dfs[i] = df\n\n    # dropping unwanted columns\n    df1_copy = dfs[0]\n    df2_copy = dfs[1]\n          \n    df1_copy.drop(drop_cols, axis=1, inplace=True)\n    df2_copy = df2_copy.reindex(columns=df1_copy.columns, fill_value=0).drop(\"Survived\", axis=1)\n\n    return df1_copy, df2_copy","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-21T08:00:55.594101Z","iopub.execute_input":"2025-10-21T08:00:55.594349Z","iopub.status.idle":"2025-10-21T08:00:55.607505Z","shell.execute_reply.started":"2025-10-21T08:00:55.594329Z","shell.execute_reply":"2025-10-21T08:00:55.606380Z"}},"outputs":[],"execution_count":37},{"cell_type":"code","source":"trainDF_cleaned, testDF_cleaned = features(trainDF, testDF)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-21T08:00:55.608682Z","iopub.execute_input":"2025-10-21T08:00:55.609018Z","iopub.status.idle":"2025-10-21T08:00:55.666397Z","shell.execute_reply.started":"2025-10-21T08:00:55.608988Z","shell.execute_reply":"2025-10-21T08:00:55.665498Z"}},"outputs":[],"execution_count":38},{"cell_type":"code","source":"trainDF_cleaned.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-21T08:00:55.667425Z","iopub.execute_input":"2025-10-21T08:00:55.667742Z","iopub.status.idle":"2025-10-21T08:00:55.685757Z","shell.execute_reply.started":"2025-10-21T08:00:55.667709Z","shell.execute_reply":"2025-10-21T08:00:55.684776Z"}},"outputs":[{"execution_count":39,"output_type":"execute_result","data":{"text/plain":"             Survived  Sex   Age     Fare  Embarked_Q  Embarked_S  Pclass_2  \\\nPassengerId                                                                   \n1                   0    1  22.0   7.2500       False        True     False   \n2                   1    0  38.0  71.2833       False       False     False   \n3                   1    0  26.0   7.9250       False        True     False   \n4                   1    0  35.0  53.1000       False        True     False   \n5                   0    1  35.0   8.0500       False        True     False   \n\n             Pclass_3  Cabin_B  Cabin_C  Cabin_D  Cabin_E  Cabin_F  Cabin_G  \\\nPassengerId                                                                   \n1                True    False    False    False    False     True    False   \n2               False    False     True    False    False    False    False   \n3                True    False    False    False    False     True    False   \n4               False    False     True    False    False    False    False   \n5                True    False    False    False    False     True    False   \n\n             Cabin_T  Family  \nPassengerId                   \n1              False       2  \n2              False       2  \n3              False       1  \n4              False       2  \n5              False       1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Fare</th>\n      <th>Embarked_Q</th>\n      <th>Embarked_S</th>\n      <th>Pclass_2</th>\n      <th>Pclass_3</th>\n      <th>Cabin_B</th>\n      <th>Cabin_C</th>\n      <th>Cabin_D</th>\n      <th>Cabin_E</th>\n      <th>Cabin_F</th>\n      <th>Cabin_G</th>\n      <th>Cabin_T</th>\n      <th>Family</th>\n    </tr>\n    <tr>\n      <th>PassengerId</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>1</td>\n      <td>22.0</td>\n      <td>7.2500</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>0</td>\n      <td>38.0</td>\n      <td>71.2833</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>0</td>\n      <td>26.0</td>\n      <td>7.9250</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>0</td>\n      <td>35.0</td>\n      <td>53.1000</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>8.0500</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":39},{"cell_type":"code","source":"testDF_cleaned.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-21T08:00:55.686583Z","iopub.execute_input":"2025-10-21T08:00:55.686882Z","iopub.status.idle":"2025-10-21T08:00:55.709699Z","shell.execute_reply.started":"2025-10-21T08:00:55.686861Z","shell.execute_reply":"2025-10-21T08:00:55.708937Z"}},"outputs":[{"execution_count":40,"output_type":"execute_result","data":{"text/plain":"             Sex   Age     Fare  Embarked_Q  Embarked_S  Pclass_2  Pclass_3  \\\nPassengerId                                                                   \n892            1  34.5   7.8292        True       False     False      True   \n893            0  47.0   7.0000       False        True     False      True   \n894            1  62.0   9.6875        True       False      True     False   \n895            1  27.0   8.6625       False        True     False      True   \n896            0  22.0  12.2875       False        True     False      True   \n\n             Cabin_B  Cabin_C  Cabin_D  Cabin_E  Cabin_F  Cabin_G  Cabin_T  \\\nPassengerId                                                                  \n892            False    False    False    False     True    False        0   \n893            False    False    False    False     True    False        0   \n894            False    False     True    False    False    False        0   \n895            False    False    False    False     True    False        0   \n896            False    False    False    False     True    False        0   \n\n             Family  \nPassengerId          \n892             NaN  \n893             NaN  \n894             NaN  \n895             NaN  \n896             NaN  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Fare</th>\n      <th>Embarked_Q</th>\n      <th>Embarked_S</th>\n      <th>Pclass_2</th>\n      <th>Pclass_3</th>\n      <th>Cabin_B</th>\n      <th>Cabin_C</th>\n      <th>Cabin_D</th>\n      <th>Cabin_E</th>\n      <th>Cabin_F</th>\n      <th>Cabin_G</th>\n      <th>Cabin_T</th>\n      <th>Family</th>\n    </tr>\n    <tr>\n      <th>PassengerId</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>892</th>\n      <td>1</td>\n      <td>34.5</td>\n      <td>7.8292</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>893</th>\n      <td>0</td>\n      <td>47.0</td>\n      <td>7.0000</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>894</th>\n      <td>1</td>\n      <td>62.0</td>\n      <td>9.6875</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>895</th>\n      <td>1</td>\n      <td>27.0</td>\n      <td>8.6625</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>896</th>\n      <td>0</td>\n      <td>22.0</td>\n      <td>12.2875</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":40},{"cell_type":"code","source":"trainDF_cleaned.describe(include=\"all\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-21T08:00:55.710867Z","iopub.execute_input":"2025-10-21T08:00:55.711195Z","iopub.status.idle":"2025-10-21T08:00:55.760092Z","shell.execute_reply.started":"2025-10-21T08:00:55.711167Z","shell.execute_reply":"2025-10-21T08:00:55.759325Z"}},"outputs":[{"execution_count":41,"output_type":"execute_result","data":{"text/plain":"          Survived         Sex         Age        Fare Embarked_Q Embarked_S  \\\ncount   891.000000  891.000000  891.000000  891.000000        891        891   \nunique         NaN         NaN         NaN         NaN          2          2   \ntop            NaN         NaN         NaN         NaN      False       True   \nfreq           NaN         NaN         NaN         NaN        814        646   \nmean      0.383838    0.647587   29.361582   32.204208        NaN        NaN   \nstd       0.486592    0.477990   13.019697   49.693429        NaN        NaN   \nmin       0.000000    0.000000    0.420000    0.000000        NaN        NaN   \n25%       0.000000    0.000000   22.000000    7.910400        NaN        NaN   \n50%       0.000000    1.000000   28.000000   14.454200        NaN        NaN   \n75%       1.000000    1.000000   35.000000   31.000000        NaN        NaN   \nmax       1.000000    1.000000   80.000000  512.329200        NaN        NaN   \n\n       Pclass_2 Pclass_3 Cabin_B Cabin_C Cabin_D Cabin_E Cabin_F Cabin_G  \\\ncount       891      891     891     891     891     891     891     891   \nunique        2        2       2       2       2       2       2       2   \ntop       False     True   False   False   False   False    True   False   \nfreq        707      491     844     792     690     859     492     887   \nmean        NaN      NaN     NaN     NaN     NaN     NaN     NaN     NaN   \nstd         NaN      NaN     NaN     NaN     NaN     NaN     NaN     NaN   \nmin         NaN      NaN     NaN     NaN     NaN     NaN     NaN     NaN   \n25%         NaN      NaN     NaN     NaN     NaN     NaN     NaN     NaN   \n50%         NaN      NaN     NaN     NaN     NaN     NaN     NaN     NaN   \n75%         NaN      NaN     NaN     NaN     NaN     NaN     NaN     NaN   \nmax         NaN      NaN     NaN     NaN     NaN     NaN     NaN     NaN   \n\n       Cabin_T      Family  \ncount      891  891.000000  \nunique       2         NaN  \ntop      False         NaN  \nfreq       890         NaN  \nmean       NaN    1.904602  \nstd        NaN    1.613459  \nmin        NaN    1.000000  \n25%        NaN    1.000000  \n50%        NaN    1.000000  \n75%        NaN    2.000000  \nmax        NaN   11.000000  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Fare</th>\n      <th>Embarked_Q</th>\n      <th>Embarked_S</th>\n      <th>Pclass_2</th>\n      <th>Pclass_3</th>\n      <th>Cabin_B</th>\n      <th>Cabin_C</th>\n      <th>Cabin_D</th>\n      <th>Cabin_E</th>\n      <th>Cabin_F</th>\n      <th>Cabin_G</th>\n      <th>Cabin_T</th>\n      <th>Family</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891</td>\n      <td>891</td>\n      <td>891</td>\n      <td>891</td>\n      <td>891</td>\n      <td>891</td>\n      <td>891</td>\n      <td>891</td>\n      <td>891</td>\n      <td>891</td>\n      <td>891</td>\n      <td>891.000000</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>814</td>\n      <td>646</td>\n      <td>707</td>\n      <td>491</td>\n      <td>844</td>\n      <td>792</td>\n      <td>690</td>\n      <td>859</td>\n      <td>492</td>\n      <td>887</td>\n      <td>890</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>0.383838</td>\n      <td>0.647587</td>\n      <td>29.361582</td>\n      <td>32.204208</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.904602</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>0.486592</td>\n      <td>0.477990</td>\n      <td>13.019697</td>\n      <td>49.693429</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.613459</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.420000</td>\n      <td>0.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>22.000000</td>\n      <td>7.910400</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>28.000000</td>\n      <td>14.454200</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>35.000000</td>\n      <td>31.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>80.000000</td>\n      <td>512.329200</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>11.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":41},{"cell_type":"code","source":"testDF_cleaned.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-21T08:00:55.762472Z","iopub.execute_input":"2025-10-21T08:00:55.763040Z","iopub.status.idle":"2025-10-21T08:00:55.785818Z","shell.execute_reply.started":"2025-10-21T08:00:55.763012Z","shell.execute_reply":"2025-10-21T08:00:55.785108Z"}},"outputs":[{"execution_count":42,"output_type":"execute_result","data":{"text/plain":"              Sex         Age        Fare  Cabin_T  Family\ncount  418.000000  418.000000  417.000000    418.0     0.0\nmean     0.636364   29.805024   35.627188      0.0     NaN\nstd      0.481622   12.667969   55.907576      0.0     NaN\nmin      0.000000    0.170000    0.000000      0.0     NaN\n25%      0.000000   23.000000    7.895800      0.0     NaN\n50%      1.000000   28.000000   14.454200      0.0     NaN\n75%      1.000000   35.750000   31.500000      0.0     NaN\nmax      1.000000   76.000000  512.329200      0.0     NaN","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Fare</th>\n      <th>Cabin_T</th>\n      <th>Family</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>418.000000</td>\n      <td>418.000000</td>\n      <td>417.000000</td>\n      <td>418.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>0.636364</td>\n      <td>29.805024</td>\n      <td>35.627188</td>\n      <td>0.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>0.481622</td>\n      <td>12.667969</td>\n      <td>55.907576</td>\n      <td>0.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>0.170000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>0.000000</td>\n      <td>23.000000</td>\n      <td>7.895800</td>\n      <td>0.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1.000000</td>\n      <td>28.000000</td>\n      <td>14.454200</td>\n      <td>0.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1.000000</td>\n      <td>35.750000</td>\n      <td>31.500000</td>\n      <td>0.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1.000000</td>\n      <td>76.000000</td>\n      <td>512.329200</td>\n      <td>0.0</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":42},{"cell_type":"markdown","source":"# Creating model\n","metadata":{}},{"cell_type":"code","source":"X = trainDF_cleaned.iloc[:, 1:]\ny = trainDF_cleaned.iloc[:, 0]\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.1, random_state=42)\n\n# Define the model\nxgb = XGBClassifier(\n    use_label_encoder=False,\n    eval_metric=\"logloss\",\n    n_jobs=-1\n)\n\n# Define parameter grid\nparam_grid = {\n    \"n_estimators\": [x for x in range(1300, 1501, 50)],\n    \"max_depth\": [x for x in range(2, 8, 1)],\n    \"learning_rate\": [0.01, 0.03],\n    \"subsample\": [0.5, 0.8, 1.0],\n    \"colsample_bytree\": [0.5, 0.8],\n    \"min_child_weight\": [x for x in range(1,6,2)],\n}\n\n# Define cross-validation strategy\ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n\n# Define GridSearchCV\ngrid_search = RandomizedSearchCV(\n    estimator=xgb,\n    param_distributions=param_grid,  # <-- use param_distributions\n    n_iter=20,                       # number of random combinations to try\n    scoring=\"roc_auc\",\n    cv=cv,\n    verbose=1,\n    n_jobs=-1,\n    random_state=42\n)\n\n# Fit\ngrid_search.fit(X, y)\n\n# Best result\nprint(\"Best parameters:\", grid_search.best_params_)\nprint(\"Best ROC AUC:\", grid_search.best_score_)","metadata":{"_kg_hide-input":false,"trusted":true,"execution":{"iopub.status.busy":"2025-10-21T08:00:55.786592Z","iopub.execute_input":"2025-10-21T08:00:55.786846Z","iopub.status.idle":"2025-10-21T08:01:18.186945Z","shell.execute_reply.started":"2025-10-21T08:00:55.786827Z","shell.execute_reply":"2025-10-21T08:01:18.184397Z"}},"outputs":[{"name":"stdout","text":"Fitting 5 folds for each of 20 candidates, totalling 100 fits\nBest parameters: {'subsample': 0.5, 'n_estimators': 1400, 'min_child_weight': 5, 'max_depth': 7, 'learning_rate': 0.03, 'colsample_bytree': 0.8}\nBest ROC AUC: 0.8911398600851662\n","output_type":"stream"}],"execution_count":43},{"cell_type":"markdown","source":"# Prediction","metadata":{}},{"cell_type":"code","source":"model2 = grid_search.best_estimator_\nmodel2.fit(X_train, y_train, eval_set=[(X_train, y_train), (X_val, y_val)], verbose=False)\n\ny_pred = model2.predict(X_val)\n\ncm = confusion_matrix(y_val, y_pred)\nsns.heatmap(cm, cmap=\"YlGnBu\", annot=True, fmt='g')\nprint((cm[0,0]+cm[1,1])/cm.sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-21T08:01:18.187630Z","iopub.execute_input":"2025-10-21T08:01:18.187909Z","iopub.status.idle":"2025-10-21T08:01:19.297686Z","shell.execute_reply.started":"2025-10-21T08:01:18.187887Z","shell.execute_reply":"2025-10-21T08:01:19.296736Z"}},"outputs":[{"name":"stdout","text":"0.8444444444444444\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":"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\n"},"metadata":{}}],"execution_count":44},{"cell_type":"code","source":"model2.fit(X, y, eval_set=[(X_train, y_train), (X_val, y_val)], verbose=False)\ndf_final = pd.DataFrame(data=model2.predict(testDF_cleaned), index=testDF_cleaned.index, columns=[\"Survived\"])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-21T08:01:19.298819Z","iopub.execute_input":"2025-10-21T08:01:19.299141Z","iopub.status.idle":"2025-10-21T08:01:20.476794Z","shell.execute_reply.started":"2025-10-21T08:01:19.299115Z","shell.execute_reply":"2025-10-21T08:01:20.476017Z"}},"outputs":[],"execution_count":45},{"cell_type":"code","source":"df_final.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-21T08:01:20.477405Z","iopub.execute_input":"2025-10-21T08:01:20.477655Z","iopub.status.idle":"2025-10-21T08:01:20.486286Z","shell.execute_reply.started":"2025-10-21T08:01:20.477617Z","shell.execute_reply":"2025-10-21T08:01:20.484663Z"}},"outputs":[{"execution_count":46,"output_type":"execute_result","data":{"text/plain":"             Survived\nPassengerId          \n892                 0\n893                 0\n894                 0\n895                 0\n896                 0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n    </tr>\n    <tr>\n      <th>PassengerId</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>892</th>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>893</th>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>894</th>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>895</th>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>896</th>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":46},{"cell_type":"code","source":"df_final.to_csv(\"/kaggle/working/\" + \"submission.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-21T08:01:20.488315Z","iopub.execute_input":"2025-10-21T08:01:20.488614Z","iopub.status.idle":"2025-10-21T08:01:20.508895Z","shell.execute_reply.started":"2025-10-21T08:01:20.488591Z","shell.execute_reply":"2025-10-21T08:01:20.507735Z"}},"outputs":[],"execution_count":47}]}